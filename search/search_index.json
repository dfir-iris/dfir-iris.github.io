{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction In a nutshell, IRIS is a collaborative platform for incident response analysts allowing to share investigations at a technical level. It's web application, so it can be either installed on a fixed-server, or on a laptop for roaming investigations where internet might not be available. It is born following the struggle to share long and complex investigations among analysts. Most of the current similar platforms are either commercial or targeting the incident handling and triage steps, not the investigation itself. The project is available at https://github.com/dfir-iris/iris-web I've read enough, I want to try it Iris comes in dockers - you only need Docker Compose and you'll be set in a few minutes. Follow the guide . Disclaimer Iris is in its early stage. It can already be used in production, but please set backups of the database and DO NOT expose the interface on the Internet. We highly recommended the use of a private dedicated and secured network. Upgrading to v1.4.0 ? Please please read the upgrade documentation Some questions you might have What can I do with Iris ? You can : Run investigations with as many analysts as you want. Everyone has its own account Run as many investigations as you want in parallel For each investigation: Associate a customer Create a high level summary Create notes under the form of a Kanban board Create IOCs Create assets (computers, servers, accounts, firewalls, or anything you want) Associate IOCs with assets Obtain insights on assets and IOCs previously encountered in investigations Create a proper timeline referencing assets and IOCs Create an automated graph of the attack from the timeline Register evidences Upload and process of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualizer) Enrich any mentioned case objects with external sources Set and attribute tasks to people to keep track of everything Register every step of the investigation Generate a report based on templates, automatically filled with the elements registered in the investigation Generate a report of activity with every step registered as well as the auto-registered entries for each analyst Search notes and IOCs across all investigations Extend the mentioned case objects to fit your needs Integrates IRIS with your current infrastructure thanks to the API and the modules, which allows to extend the platform features. What can I not do with Iris ? This is the part where we need you. Iris aims to be a collaborative project, so any idea is welcome. You can head to the Github of the project and create an issue with the idea. What Iris is made of ? Iris is mostly coded in Python 3. There is also some HTML, CSS and javascript for the interface. Under the hood, Iris relies on : Flask for the web engine SQLAlchemy and PostgresSQL for the database RabbitMQ for the jobs processing Nginx for the reverse proxy Can I be involved ? Absolutely. You can either contact us directly or submit pull requests and ideas on the GitHub. Who's behind Iris ? The idea was born in the French CSIRT of Airbus Cybersecurity, and created by a small group of friendly incident response analysts. Iris has been used since its early stage in 2020, on more than a hundred investigations including complex cyberattacks. Why was Iris published ? We felt a gap and we wanted to fill it. We believe open source tools driven by communities can only make them better.","title":"Introduction"},{"location":"#introduction","text":"In a nutshell, IRIS is a collaborative platform for incident response analysts allowing to share investigations at a technical level. It's web application, so it can be either installed on a fixed-server, or on a laptop for roaming investigations where internet might not be available. It is born following the struggle to share long and complex investigations among analysts. Most of the current similar platforms are either commercial or targeting the incident handling and triage steps, not the investigation itself. The project is available at https://github.com/dfir-iris/iris-web I've read enough, I want to try it Iris comes in dockers - you only need Docker Compose and you'll be set in a few minutes. Follow the guide . Disclaimer Iris is in its early stage. It can already be used in production, but please set backups of the database and DO NOT expose the interface on the Internet. We highly recommended the use of a private dedicated and secured network. Upgrading to v1.4.0 ? Please please read the upgrade documentation","title":"Introduction"},{"location":"#some-questions-you-might-have","text":"","title":"Some questions you might have"},{"location":"#what-can-i-do-with-iris","text":"You can : Run investigations with as many analysts as you want. Everyone has its own account Run as many investigations as you want in parallel For each investigation: Associate a customer Create a high level summary Create notes under the form of a Kanban board Create IOCs Create assets (computers, servers, accounts, firewalls, or anything you want) Associate IOCs with assets Obtain insights on assets and IOCs previously encountered in investigations Create a proper timeline referencing assets and IOCs Create an automated graph of the attack from the timeline Register evidences Upload and process of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualizer) Enrich any mentioned case objects with external sources Set and attribute tasks to people to keep track of everything Register every step of the investigation Generate a report based on templates, automatically filled with the elements registered in the investigation Generate a report of activity with every step registered as well as the auto-registered entries for each analyst Search notes and IOCs across all investigations Extend the mentioned case objects to fit your needs Integrates IRIS with your current infrastructure thanks to the API and the modules, which allows to extend the platform features.","title":"What can I do with Iris ?"},{"location":"#what-can-i-not-do-with-iris","text":"This is the part where we need you. Iris aims to be a collaborative project, so any idea is welcome. You can head to the Github of the project and create an issue with the idea.","title":"What can I not do with Iris ?"},{"location":"#what-iris-is-made-of","text":"Iris is mostly coded in Python 3. There is also some HTML, CSS and javascript for the interface. Under the hood, Iris relies on : Flask for the web engine SQLAlchemy and PostgresSQL for the database RabbitMQ for the jobs processing Nginx for the reverse proxy","title":"What Iris is made of ?"},{"location":"#can-i-be-involved","text":"Absolutely. You can either contact us directly or submit pull requests and ideas on the GitHub.","title":"Can I be involved ?"},{"location":"#whos-behind-iris","text":"The idea was born in the French CSIRT of Airbus Cybersecurity, and created by a small group of friendly incident response analysts. Iris has been used since its early stage in 2020, on more than a hundred investigations including complex cyberattacks.","title":"Who's behind Iris ?"},{"location":"#why-was-iris-published","text":"We felt a gap and we wanted to fill it. We believe open source tools driven by communities can only make them better.","title":"Why was Iris published ?"},{"location":"getting_started/","text":"Quick Start The most straight forward and recommended way to use IRIS is with Docker. This is presented here. Pre-requisites Hardware Iris is not very resourceful and can be run on a small laptop (4 cores, 8Gb of RAM). However, for large organization and heavy usage, it will need to be greatly scaled up. We don't have benchmarks yet but keep in mind that the database can grow rapidly and modules can be resourceful depending on their purposes. The source code includes a burst test that you can adjust to recreate the load Iris might face. Docker Docker and docker compose are needed to build and run the project. Depending on the OS you will find all the information to install them on the official website of Docker . The platform is tested on Linux and MacOS (including Apple Silicon). While it should work on Windows, some path needed by the dockers to store permanent files might need to be changed in the dockerfiles. Build and run You have found a home for Iris and installed Docker and Docker compose, it is time to build the containers. Iris is split on 5 Docker services, each with a different role. app - iris_webapp : The core, including web server, DB management, module management etc. db : A PostgresSQL database RabbitMQ : A RabbitMQ engine to handle jobs queuing and processing worker : Jobs handler relying on RabbitMQ nginx : A NGINX reverse proxy Each service can be built independently, which is useful when developing. In this QuickStart everything is built at once. # Clone the iris-web repository git clone https://github.com/dfir-iris/iris-web.git cd iris-web # Copy the environment file cp .env.model .env # [... optionally, do some configuration as specified below ...] # Build the dockers docker-compose build # Run IRIS docker-compose up Iris will be available on the host interface, port 4433, HTTPS protocol. By default, an administrator account is created. The password is printed in stdout the very first time Iris is started. It won't be printed anymore after that. You can search for WARNING :: post_init :: create_safe_admin :: >>> in the logs to find the password. If you want to define an admin password at the first start, you can also create and define the environment variable IRIS_ADM_PASSWORD in the app docker instance (see the webApp Dockerfile). This has no effects once the administrator account is created. Optional configuration You can skip this part if you just want to try or develop. If used in production, please configure the .env file at the root of the project: Nginx: you might want to specify your own certificate as specified above Database credentials: POSTGRES_PASSWORD and DB_PASS (you can also customise the usernames) IRIS secrets: SECRET_KEY and SECURITY_PASSWORD_SALT The very first time the app builds might take quite a while. After that if a service needs an update, the building process is faster.","title":"Quick Start"},{"location":"getting_started/#quick-start","text":"The most straight forward and recommended way to use IRIS is with Docker. This is presented here.","title":"Quick Start"},{"location":"getting_started/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"getting_started/#hardware","text":"Iris is not very resourceful and can be run on a small laptop (4 cores, 8Gb of RAM). However, for large organization and heavy usage, it will need to be greatly scaled up. We don't have benchmarks yet but keep in mind that the database can grow rapidly and modules can be resourceful depending on their purposes. The source code includes a burst test that you can adjust to recreate the load Iris might face.","title":"Hardware"},{"location":"getting_started/#docker","text":"Docker and docker compose are needed to build and run the project. Depending on the OS you will find all the information to install them on the official website of Docker . The platform is tested on Linux and MacOS (including Apple Silicon). While it should work on Windows, some path needed by the dockers to store permanent files might need to be changed in the dockerfiles.","title":"Docker"},{"location":"getting_started/#build-and-run","text":"You have found a home for Iris and installed Docker and Docker compose, it is time to build the containers. Iris is split on 5 Docker services, each with a different role. app - iris_webapp : The core, including web server, DB management, module management etc. db : A PostgresSQL database RabbitMQ : A RabbitMQ engine to handle jobs queuing and processing worker : Jobs handler relying on RabbitMQ nginx : A NGINX reverse proxy Each service can be built independently, which is useful when developing. In this QuickStart everything is built at once. # Clone the iris-web repository git clone https://github.com/dfir-iris/iris-web.git cd iris-web # Copy the environment file cp .env.model .env # [... optionally, do some configuration as specified below ...] # Build the dockers docker-compose build # Run IRIS docker-compose up Iris will be available on the host interface, port 4433, HTTPS protocol. By default, an administrator account is created. The password is printed in stdout the very first time Iris is started. It won't be printed anymore after that. You can search for WARNING :: post_init :: create_safe_admin :: >>> in the logs to find the password. If you want to define an admin password at the first start, you can also create and define the environment variable IRIS_ADM_PASSWORD in the app docker instance (see the webApp Dockerfile). This has no effects once the administrator account is created.","title":"Build and run"},{"location":"getting_started/#optional-configuration","text":"You can skip this part if you just want to try or develop. If used in production, please configure the .env file at the root of the project: Nginx: you might want to specify your own certificate as specified above Database credentials: POSTGRES_PASSWORD and DB_PASS (you can also customise the usernames) IRIS secrets: SECRET_KEY and SECURITY_PASSWORD_SALT The very first time the app builds might take quite a while. After that if a service needs an update, the building process is faster.","title":"Optional configuration"},{"location":"roadmap/","text":"Roadmap Photo by Annie Spratt The roadmap is constantly evolving with feedbacks we receive. We've thus moved it within a Github project. You can check it here .","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Photo by Annie Spratt The roadmap is constantly evolving with feedbacks we receive. We've thus moved it within a Github project. You can check it here .","title":"Roadmap"},{"location":"zqa/","text":"Q & A Cases Can I recover a deleted case ? No. Cases are deleted from the database and changes are committed. There is no coming back unless you have made backups of the database (which we recommend). Can I recover a deleted case object ? No. Every object such as IOCs, assets, events, notes, etc are immediately deleted from the database and changes are committed. Can I add a new asset type ? Yes. With a user that have administrative rights, go to Advanced > Assets Types . Can I add a new IOC type ? Yes. Starting from v1.3.0, IOC types can be manipulated. Can I add new fields to case objects such as IOCs, Assets, etc ? Yes. Starting from v1.4.0, all case objects can be extended thanks to custom attributes. With a user that have administrative rights, go to Advanced > Objects Attributes . Can I search into custom attributes fields Not for now. The searches in each case objects page are done client-side, and the attributes are not fetched. We will however implement a server side search in next releases. Can I create two cases with the same name for the same customer ? Yes. Cases are identified with a unique number, so they can have the same name. Can I restrict the view of case to a set of users ? No. Please see Security. Can I change the name or customer of an existing case ? These changes are not possible for now but it might be implemented in future versions. Operations What is the password policy ? Can it be changed ? For now the password policy is hardcoded and cannot be changed. It should be 12 characters minimum and contains a capital letter and a number. Can I change my profile picture ? No, not for now. This wasn't a priority for us, it will be released in future versions. I lost the administrator password, can I recover it ? Passwords are hashed so they can't be recovered. But you can change it. If you have another admin user : Being logged as this user, simply head to the Advanced > Users section, and change the administrator password. If you don't have another admin user: You can't do the change via Iris, you need to update the DB manually. Danger ! Do not delete and recreate any users from the DB ! This will create inconsistencies in the relations and likely corrupt everything. Generate the hash of the new password with Python BCrypt import bcrypt print ( bcrypt . hashpw ( < new_password > , bcrypt . gensalt ()) Connect to the DB docker then the Postgresql database iris_db and update the password / # su postgres / # psql postgres = # \\c iris_db postgres = # UPDATE user SET password = '<hash>' WHERE \"user\".name == 'administrator'; Can I delete a user ? No. To keep consistencies in the database, users unfortunately cannot be deleted if they have done some activities. You can however disable them to prevent them appearing in the UI. Can I delete a customer ? No. To keep consistencies in the database, customers unfortunately cannot be deleted if they are linked to cases. Can I create organizations or groups ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I create more roles ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I prevent backrefs of assets and IOCs ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. My report template is not generated and generates an error Please triple check typos in tags as there is no fault tolerance. Integration Can I enrich IOCs with external sources ? Starting from v1.4.0, it is now possible to easily develop module to enrich case objects. A module Iris VT is already provided to offer VirusTotal insights. Is there an API client ? Yes, you can find it on our Github . Security Can I restrict cases ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I expose IRIS on the Internet ? NO ! Please don't. This platform should only be accessible in a restricted environment. I found a security issue, can I have a bounty ? No - IRIS is free and open source so there is no bounty. Please report it as soon as possible so we can fix it. MISC What does IRIS stand for ? Originally Incident Response Investigation System. But it can be whatever you want really.","title":"Q & A"},{"location":"zqa/#q-a","text":"","title":"Q &amp; A"},{"location":"zqa/#cases","text":"Can I recover a deleted case ? No. Cases are deleted from the database and changes are committed. There is no coming back unless you have made backups of the database (which we recommend). Can I recover a deleted case object ? No. Every object such as IOCs, assets, events, notes, etc are immediately deleted from the database and changes are committed. Can I add a new asset type ? Yes. With a user that have administrative rights, go to Advanced > Assets Types . Can I add a new IOC type ? Yes. Starting from v1.3.0, IOC types can be manipulated. Can I add new fields to case objects such as IOCs, Assets, etc ? Yes. Starting from v1.4.0, all case objects can be extended thanks to custom attributes. With a user that have administrative rights, go to Advanced > Objects Attributes . Can I search into custom attributes fields Not for now. The searches in each case objects page are done client-side, and the attributes are not fetched. We will however implement a server side search in next releases. Can I create two cases with the same name for the same customer ? Yes. Cases are identified with a unique number, so they can have the same name. Can I restrict the view of case to a set of users ? No. Please see Security. Can I change the name or customer of an existing case ? These changes are not possible for now but it might be implemented in future versions.","title":"Cases"},{"location":"zqa/#operations","text":"What is the password policy ? Can it be changed ? For now the password policy is hardcoded and cannot be changed. It should be 12 characters minimum and contains a capital letter and a number. Can I change my profile picture ? No, not for now. This wasn't a priority for us, it will be released in future versions. I lost the administrator password, can I recover it ? Passwords are hashed so they can't be recovered. But you can change it. If you have another admin user : Being logged as this user, simply head to the Advanced > Users section, and change the administrator password. If you don't have another admin user: You can't do the change via Iris, you need to update the DB manually. Danger ! Do not delete and recreate any users from the DB ! This will create inconsistencies in the relations and likely corrupt everything. Generate the hash of the new password with Python BCrypt import bcrypt print ( bcrypt . hashpw ( < new_password > , bcrypt . gensalt ()) Connect to the DB docker then the Postgresql database iris_db and update the password / # su postgres / # psql postgres = # \\c iris_db postgres = # UPDATE user SET password = '<hash>' WHERE \"user\".name == 'administrator'; Can I delete a user ? No. To keep consistencies in the database, users unfortunately cannot be deleted if they have done some activities. You can however disable them to prevent them appearing in the UI. Can I delete a customer ? No. To keep consistencies in the database, customers unfortunately cannot be deleted if they are linked to cases. Can I create organizations or groups ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I create more roles ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I prevent backrefs of assets and IOCs ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. My report template is not generated and generates an error Please triple check typos in tags as there is no fault tolerance.","title":"Operations"},{"location":"zqa/#integration","text":"Can I enrich IOCs with external sources ? Starting from v1.4.0, it is now possible to easily develop module to enrich case objects. A module Iris VT is already provided to offer VirusTotal insights. Is there an API client ? Yes, you can find it on our Github .","title":"Integration"},{"location":"zqa/#security","text":"Can I restrict cases ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I expose IRIS on the Internet ? NO ! Please don't. This platform should only be accessible in a restricted environment. I found a security issue, can I have a bounty ? No - IRIS is free and open source so there is no bounty. Please report it as soon as possible so we can fix it.","title":"Security"},{"location":"zqa/#misc","text":"What does IRIS stand for ? Originally Incident Response Investigation System. But it can be whatever you want really.","title":"MISC"},{"location":"development/environment/","text":"Environment This documentation is not a How-To develop IRIS. It only proposes a setup to easily develop and test IRIS. It follows an issue raised on the Github of the project. It recommends the use of a hybrid development environment, as most of the time only the web-app needs to be changed: Pycharm or any Python IDE for the web-app Docker for db, nginx, celery and worker. The three later are even optional if you don't develop modules. Web-app For the webapp configuration, a specific .ini need to be created. Create config.priv.ini in source/app by copying the config.docker.ini present in the same directory. Change PG_SERVER = db to PG_SERVER = 127.0.0.1 or whatever IP is the Postgresql/docker running with That's the only configuration change needed for the app to run outside docker. The docker.priv.ini is already excluded in gitignore. Then Pycharm need to be setup with a dedicated environment, by adding a new configuration: Script path : source/run.py Python interpreter 3.9 Working directory: source To have pylint, right click on source in the directory tree and mark directory as > sources root . The requirements then need to be installed. Pycharm should detect the requirements.txt and propose to install the dependencies. Otherwise they can be installed with the following command (issued in the virtual environment) : pip3 install -r source\\requirements.txt Run Spin up the docker db docker-compose up db Run the Pycharm configuration you created The interface should be accessible on http://127.0.0.1:8000 (and https://127.0.0.1:4433 if you started the nginx docker) IRIS can now be developed and debugged on the fly. Tests in docker Once the code is working by running on Pycharm, we highly recommend testing it on Docker. To do so, the app docker need to be erased and rebuilt. docker-compose rm app docker-compose build app docker-compose up db app Development considerations If the development results in DB modification, please use Alembic and add a migration script so users don't loose their data when they upgrade.","title":"Environment"},{"location":"development/environment/#environment","text":"This documentation is not a How-To develop IRIS. It only proposes a setup to easily develop and test IRIS. It follows an issue raised on the Github of the project. It recommends the use of a hybrid development environment, as most of the time only the web-app needs to be changed: Pycharm or any Python IDE for the web-app Docker for db, nginx, celery and worker. The three later are even optional if you don't develop modules.","title":"Environment"},{"location":"development/environment/#web-app","text":"For the webapp configuration, a specific .ini need to be created. Create config.priv.ini in source/app by copying the config.docker.ini present in the same directory. Change PG_SERVER = db to PG_SERVER = 127.0.0.1 or whatever IP is the Postgresql/docker running with That's the only configuration change needed for the app to run outside docker. The docker.priv.ini is already excluded in gitignore. Then Pycharm need to be setup with a dedicated environment, by adding a new configuration: Script path : source/run.py Python interpreter 3.9 Working directory: source To have pylint, right click on source in the directory tree and mark directory as > sources root . The requirements then need to be installed. Pycharm should detect the requirements.txt and propose to install the dependencies. Otherwise they can be installed with the following command (issued in the virtual environment) : pip3 install -r source\\requirements.txt","title":"Web-app"},{"location":"development/environment/#run","text":"Spin up the docker db docker-compose up db Run the Pycharm configuration you created The interface should be accessible on http://127.0.0.1:8000 (and https://127.0.0.1:4433 if you started the nginx docker) IRIS can now be developed and debugged on the fly.","title":"Run"},{"location":"development/environment/#tests-in-docker","text":"Once the code is working by running on Pycharm, we highly recommend testing it on Docker. To do so, the app docker need to be erased and rebuilt. docker-compose rm app docker-compose build app docker-compose up db app Development considerations If the development results in DB modification, please use Alembic and add a migration script so users don't loose their data when they upgrade.","title":"Tests in docker"},{"location":"development/hooks/","text":"IRIS Hooks Introduced in IRIS v1.4.0 Hooks are a mean for modules to react on specific events that occurs on IRIS. By subscribing to a hook, a module is automatically notified when the associated event occurs. This offers a multitude of possibilities, from adding insight to IRIS objects, to pushing information to another platform or even changing how IRIS works. Types There are 3 types of hooks. On preload : Triggered before an object is processed and committed to database. It is triggered right after a request is received, and the data associated with the hook is usually the request content itself. In most of the cases, modules should not subscribe to these hooks. On postload : Triggered after an object is processed and committed to database. It is triggered after IRIS processed the request and the data associated with the hook is usually a list of SqlAlchemy objects (such as IOC, Assets, etc). Manual : Triggered by manual action of a user. When a module subscribes to these hooks, it needs to provide a \"menu option name\" which will be displayed to users. When they click this option, the associated hook is triggered for this module only. Multiple manual hooks can be registered for one module. Danger on_preload hooks must run synchronously, i.e not queued in RabbitMQ. This effectively blocks the current user request until the module finishes the processing. We highly recommend to only use on_postload hooks for a better user experience. These hooks are transparent for users and rely on already verified and committed data. Handling on_preload hooks implies the received data is unsafe - directly coming from remote clients - and the module needs to process the data as fast as possible. Subscribing and unsubscribing Two methods are provided by IrisModuleInterface to subscribe and unsubscribe to hooks. def register_to_hook ( module_id : int , iris_hook_name : str , manual_hook_name : str = None , run_asynchronously : bool = True ) def deregister_from_hook ( module_id : int , iris_hook_name : str ) The registration method expects the following arguments: module_id : The ID of the calling module. This information is given by IRIS when the register_hooks method is called. iris_hook_name : The name of the hook to which subscribe. This must be one of the hook listed in the section below. manual_hook_name : The name of the UI menu that is provided to users if the registration concerns a manual hook. If nothing is provided, IRIS will create a name composed as follows: <module_name>::<hook_name> . This value is ignored if the signal is not manual. run_asynchronously : Set to True (default) to run the module in a RabbitMQ task upon hook triggering. If set to False, the module is called immediately, which have for effect to effectively block the current user request until the module finishes. This is the behavior to use for on_preload hooks. However , we strongly recommend the use of on_postload hooks to prevent any unwanted (see warning section above). The deregistration method expects the following arguments: module_id : The ID of the calling module. This information is given by IRIS when the register_hooks methods is called. iris_hook_name : The name of the hook to which unsubscribe. If the module is not subscribed to the specified hook the function returns without errors. Please see the modules documentation for more details on how to implement these methods. Available hooks The following hooks are natively available for subscription. Hook name Description on_preload_case_create Triggered on case creation, before commit in DB on_postload_case_create Triggered on case creation, after commit in DB on_preload_case_delete Triggered on case deletion, before commit in DB on_postload_case_delete Triggered on case deletion, after commit in DB on_preload_asset_create Triggered on asset creation, before commit in DB on_postload_asset_create Triggered on asset creation, after commit in DB on_preload_asset_update Triggered on asset update, before commit in DB on_postload_asset_update Triggered on asset update, after commit in DB on_preload_asset_delete Triggered on asset deletion, before commit in DB on_postload_asset_delete Triggered on asset deletion, after commit in DB on_manual_trigger_asset Triggered upon user action on_preload_note_create Triggered on note creation, before commit in DB on_postload_note_create Triggered on note creation, after commit in DB on_preload_note_update Triggered on note update, before commit in DB on_postload_note_update Triggered on note update, after commit in DB on_preload_note_delete Triggered on note deletion, before commit in DB on_postload_note_delete Triggered on note deletion, after commit in DB on_manual_trigger_note Triggered upon user action on_preload_ioc_create Triggered on ioc creation, before commit in DB on_postload_ioc_create Triggered on ioc creation, after commit in DB on_preload_ioc_update Triggered on ioc update, before commit in DB on_postload_ioc_update Triggered on ioc update, after commit in DB on_preload_ioc_delete Triggered on ioc deletion, before commit in DB on_postload_ioc_delete Triggered on ioc deletion, after commit in DB on_manual_trigger_ioc Triggered upon user action on_preload_event_create Triggered on event creation, before commit in DB on_postload_event_create Triggered on event creation, after commit in DB on_preload_event_update Triggered on event update, before commit in DB on_postload_event_update Triggered on event update, after commit in DB on_preload_event_delete Triggered on event deletion, before commit in DB on_postload_event_delete Triggered on event deletion, after commit in DB on_manual_trigger_event Triggered upon user action on_preload_evidence_create Triggered on evidence creation, before commit in DB on_postload_evidence_create Triggered on evidence creation, after commit in DB on_preload_evidence_update Triggered on evidence update, before commit in DB on_postload_evidence_update Triggered on evidence update, after commit in DB on_preload_evidence_delete Triggered on evidence deletion, before commit in DB on_postload_evidence_delete Triggered on evidence deletion, after commit in DB on_manual_trigger_evidence Triggered upon user action on_preload_task_create Triggered on task creation, before commit in DB on_postload_task_create Triggered on task creation, after commit in DB on_preload_task_update Triggered on task update, before commit in DB on_postload_task_update Triggered on task update, after commit in DB on_preload_task_delete Triggered on task deletion, before commit in DB on_postload_task_delete Triggered on task deletion, after commit in DB on_manual_trigger_task Triggered upon user action on_preload_global_task_create Triggered on global task creation, before commit in DB on_postload_global_task_create Triggered on global task creation, after commit in DB on_preload_global_task_update Triggered on task update, before commit in DB on_postload_global_task_update Triggered on global task update, after commit in DB on_preload_global_task_delete Triggered on task deletion, before commit in DB on_postload_global_task_delete Triggered on global task deletion, after commit in DB on_manual_trigger_global_task Triggered upon user action on_preload_report_create Triggered on report creation, before generation in DB on_postload_report_create Triggered on report creation, before download of the document on_preload_activities_report_create Triggered on activities report creation, before generation in DB on_postload_activities_report_create Triggered on activities report creation, before download of the document","title":"IRIS Hooks"},{"location":"development/hooks/#iris-hooks","text":"Introduced in IRIS v1.4.0 Hooks are a mean for modules to react on specific events that occurs on IRIS. By subscribing to a hook, a module is automatically notified when the associated event occurs. This offers a multitude of possibilities, from adding insight to IRIS objects, to pushing information to another platform or even changing how IRIS works.","title":"IRIS Hooks"},{"location":"development/hooks/#types","text":"There are 3 types of hooks. On preload : Triggered before an object is processed and committed to database. It is triggered right after a request is received, and the data associated with the hook is usually the request content itself. In most of the cases, modules should not subscribe to these hooks. On postload : Triggered after an object is processed and committed to database. It is triggered after IRIS processed the request and the data associated with the hook is usually a list of SqlAlchemy objects (such as IOC, Assets, etc). Manual : Triggered by manual action of a user. When a module subscribes to these hooks, it needs to provide a \"menu option name\" which will be displayed to users. When they click this option, the associated hook is triggered for this module only. Multiple manual hooks can be registered for one module. Danger on_preload hooks must run synchronously, i.e not queued in RabbitMQ. This effectively blocks the current user request until the module finishes the processing. We highly recommend to only use on_postload hooks for a better user experience. These hooks are transparent for users and rely on already verified and committed data. Handling on_preload hooks implies the received data is unsafe - directly coming from remote clients - and the module needs to process the data as fast as possible.","title":"Types"},{"location":"development/hooks/#subscribing-and-unsubscribing","text":"Two methods are provided by IrisModuleInterface to subscribe and unsubscribe to hooks. def register_to_hook ( module_id : int , iris_hook_name : str , manual_hook_name : str = None , run_asynchronously : bool = True ) def deregister_from_hook ( module_id : int , iris_hook_name : str ) The registration method expects the following arguments: module_id : The ID of the calling module. This information is given by IRIS when the register_hooks method is called. iris_hook_name : The name of the hook to which subscribe. This must be one of the hook listed in the section below. manual_hook_name : The name of the UI menu that is provided to users if the registration concerns a manual hook. If nothing is provided, IRIS will create a name composed as follows: <module_name>::<hook_name> . This value is ignored if the signal is not manual. run_asynchronously : Set to True (default) to run the module in a RabbitMQ task upon hook triggering. If set to False, the module is called immediately, which have for effect to effectively block the current user request until the module finishes. This is the behavior to use for on_preload hooks. However , we strongly recommend the use of on_postload hooks to prevent any unwanted (see warning section above). The deregistration method expects the following arguments: module_id : The ID of the calling module. This information is given by IRIS when the register_hooks methods is called. iris_hook_name : The name of the hook to which unsubscribe. If the module is not subscribed to the specified hook the function returns without errors. Please see the modules documentation for more details on how to implement these methods.","title":"Subscribing and unsubscribing"},{"location":"development/hooks/#available-hooks","text":"The following hooks are natively available for subscription. Hook name Description on_preload_case_create Triggered on case creation, before commit in DB on_postload_case_create Triggered on case creation, after commit in DB on_preload_case_delete Triggered on case deletion, before commit in DB on_postload_case_delete Triggered on case deletion, after commit in DB on_preload_asset_create Triggered on asset creation, before commit in DB on_postload_asset_create Triggered on asset creation, after commit in DB on_preload_asset_update Triggered on asset update, before commit in DB on_postload_asset_update Triggered on asset update, after commit in DB on_preload_asset_delete Triggered on asset deletion, before commit in DB on_postload_asset_delete Triggered on asset deletion, after commit in DB on_manual_trigger_asset Triggered upon user action on_preload_note_create Triggered on note creation, before commit in DB on_postload_note_create Triggered on note creation, after commit in DB on_preload_note_update Triggered on note update, before commit in DB on_postload_note_update Triggered on note update, after commit in DB on_preload_note_delete Triggered on note deletion, before commit in DB on_postload_note_delete Triggered on note deletion, after commit in DB on_manual_trigger_note Triggered upon user action on_preload_ioc_create Triggered on ioc creation, before commit in DB on_postload_ioc_create Triggered on ioc creation, after commit in DB on_preload_ioc_update Triggered on ioc update, before commit in DB on_postload_ioc_update Triggered on ioc update, after commit in DB on_preload_ioc_delete Triggered on ioc deletion, before commit in DB on_postload_ioc_delete Triggered on ioc deletion, after commit in DB on_manual_trigger_ioc Triggered upon user action on_preload_event_create Triggered on event creation, before commit in DB on_postload_event_create Triggered on event creation, after commit in DB on_preload_event_update Triggered on event update, before commit in DB on_postload_event_update Triggered on event update, after commit in DB on_preload_event_delete Triggered on event deletion, before commit in DB on_postload_event_delete Triggered on event deletion, after commit in DB on_manual_trigger_event Triggered upon user action on_preload_evidence_create Triggered on evidence creation, before commit in DB on_postload_evidence_create Triggered on evidence creation, after commit in DB on_preload_evidence_update Triggered on evidence update, before commit in DB on_postload_evidence_update Triggered on evidence update, after commit in DB on_preload_evidence_delete Triggered on evidence deletion, before commit in DB on_postload_evidence_delete Triggered on evidence deletion, after commit in DB on_manual_trigger_evidence Triggered upon user action on_preload_task_create Triggered on task creation, before commit in DB on_postload_task_create Triggered on task creation, after commit in DB on_preload_task_update Triggered on task update, before commit in DB on_postload_task_update Triggered on task update, after commit in DB on_preload_task_delete Triggered on task deletion, before commit in DB on_postload_task_delete Triggered on task deletion, after commit in DB on_manual_trigger_task Triggered upon user action on_preload_global_task_create Triggered on global task creation, before commit in DB on_postload_global_task_create Triggered on global task creation, after commit in DB on_preload_global_task_update Triggered on task update, before commit in DB on_postload_global_task_update Triggered on global task update, after commit in DB on_preload_global_task_delete Triggered on task deletion, before commit in DB on_postload_global_task_delete Triggered on global task deletion, after commit in DB on_manual_trigger_global_task Triggered upon user action on_preload_report_create Triggered on report creation, before generation in DB on_postload_report_create Triggered on report creation, before download of the document on_preload_activities_report_create Triggered on activities report creation, before generation in DB on_postload_activities_report_create Triggered on activities report creation, before download of the document","title":"Available hooks"},{"location":"development/modules/","text":"Modules Introduction A DFIR-IRIS Module (DIM) is a Python package allowing to extend IRIS features. DIMs are not running constantly and are only called following specific actions done by users. We distinct two types of modules: Pipeline modules : Allow uploading and processing of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualiser). These are called when a user queries Update case and select evidences to process. Processor modules : Allow processing of IRIS data upon predefined actions / hooks. (eg: be notified when a new IOC is created and get VT/MISP insights for it). These are either called automatically upon specific events, or if a user manually triggers them. Except for some triggers for processor modules, all tasks provided by DIMs are run asynchronously in RabbitMQ tasks, so they don't impact the UI. Both types of DIMs have the same structure, they only differ in their configurations and how they handle the data they receive. For that purpose, every DIM inherit from a common class named IrisModuleInterface - available here - which provides the basic structure and methods of a module. Hint To quickly start writing a new module, one can follow these tutorials . Overview Modules are instantiated upon actions (hooks, triggers, user actions) and this occurs each time the said actions occur. It implies the initiation of a module has to be very quick. In most of the case, the __init__ method should not even be overwritten. They can live either in the worker or the web-app, depending on their type and action they are handling. They can also live in both. This implies multiple instances of the same module can run at the same time. The graph below shows two modules of different types running in the worker and interacting with external elements. Modules don't have to handle the task creations or resource locks. This is handled by IRIS. They just need to process the data they received and return results in a predefined manner. Common structure The section below describes the common structure of modules. Directory structure setup.py # Setup configuration to build the module README.md # README iris_example_name # Name of the package __init__.py # Declaration of the package and main class IrisExampleConfig.py # Configuration of the module to help keep the main file clean IrisExampleInterface.py # Main class of the module module_helper # Sub module containing the helper functions of the module helper.py # for instance access to ext resource, manipulation of data helper2.py # etc. The init .py file Iris loads the modules dynamically. To do so, it needs to know the name of the main class of the module and relies on __init__.py to find this information. __iris_module_interface = \"IrisEXAMPLEInterface\" Where IrisEXAMPLEInterface is the main class of the module and inherits of the base class IrisModuleInterface . Caution Failing to provide the main class in __init__.py or having the main class inherit from IrisModuleInterface will make IRIS fail each time it attempts to load the module. The module configuration Iris needs to know what the module is doing and what services it is providing. This is done via the attributes of the main class (let's say IrisEXAMPLEInterface ). The attributes are : _module_name : string - \"human\" name presented to users. _interface_version : float - version of IrisModuleInterface used. If the version is not supported, the server will refuse to register the module. _module_version : float - version of the module itself to help users keep tracks of evolutions. _module_type : string - Type of module. The available modules types are listed in IrisModuleInterface.IrisModuleTypes _pipeline_support : bool - should be set to True if it implements a pipeline process (aka module of type pipeline_module ). _pipeline_info : dict - contains the configuration of the pipeline. The following structure must be followed: pipeline_info = { # Name of the pipeline used for internal tracking. This # must be unique among all modules so pick something really unique \"pipeline_internal_name\" : \"example_pipeline\" , # The name of the pipeline presented to the user. Use something # that will help the users to identify the right pipeline \"pipeline_human_name\" : \"Example Pipeline\" , # Arguments presented to the users when they select the pipeline \"pipeline_args\" : [ [ 'some_index' , 'required' ], [ 'example_argument' , 'optional' ] ] } _module_configuration : A list of dict. The list contains each field needed by the module. This list is shown in the Iris webpage of the module configuration. Each field in an entry is mandatory. _module_configuration = [ { \"param_name\" : \"vt_api_key\" , \"param_human_name\" : \"VT API Key\" , \"param_description\" : \"Virus total API key\" , \"default\" : None , \"mandatory\" : True , \"type\" : \"sensitive_string\" }, { \"param_name\" : \"vt_key_is_premium\" , \"param_human_name\" : \"VT Key is premium\" , \"param_description\" : \"Set to True if the VT key is premium\" , \"default\" : False , \"mandatory\" : True , \"type\" : \"bool\" }, { \"param_name\" : \"vt_ip_assign_asn_as_tag\" , \"param_human_name\" : \"Assign ASN tag to IP\" , \"param_description\" : \"Assign a new tag to IOC IPs with the ASN fetched from VT\" , \"default\" : True , \"mandatory\" : True , \"type\" : \"bool\" } ] The above example results in the following.","title":"Modules"},{"location":"development/modules/#modules","text":"","title":"Modules"},{"location":"development/modules/#introduction","text":"A DFIR-IRIS Module (DIM) is a Python package allowing to extend IRIS features. DIMs are not running constantly and are only called following specific actions done by users. We distinct two types of modules: Pipeline modules : Allow uploading and processing of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualiser). These are called when a user queries Update case and select evidences to process. Processor modules : Allow processing of IRIS data upon predefined actions / hooks. (eg: be notified when a new IOC is created and get VT/MISP insights for it). These are either called automatically upon specific events, or if a user manually triggers them. Except for some triggers for processor modules, all tasks provided by DIMs are run asynchronously in RabbitMQ tasks, so they don't impact the UI. Both types of DIMs have the same structure, they only differ in their configurations and how they handle the data they receive. For that purpose, every DIM inherit from a common class named IrisModuleInterface - available here - which provides the basic structure and methods of a module. Hint To quickly start writing a new module, one can follow these tutorials .","title":"Introduction"},{"location":"development/modules/#overview","text":"Modules are instantiated upon actions (hooks, triggers, user actions) and this occurs each time the said actions occur. It implies the initiation of a module has to be very quick. In most of the case, the __init__ method should not even be overwritten. They can live either in the worker or the web-app, depending on their type and action they are handling. They can also live in both. This implies multiple instances of the same module can run at the same time. The graph below shows two modules of different types running in the worker and interacting with external elements. Modules don't have to handle the task creations or resource locks. This is handled by IRIS. They just need to process the data they received and return results in a predefined manner.","title":"Overview"},{"location":"development/modules/#common-structure","text":"The section below describes the common structure of modules.","title":"Common structure"},{"location":"development/modules/#directory-structure","text":"setup.py # Setup configuration to build the module README.md # README iris_example_name # Name of the package __init__.py # Declaration of the package and main class IrisExampleConfig.py # Configuration of the module to help keep the main file clean IrisExampleInterface.py # Main class of the module module_helper # Sub module containing the helper functions of the module helper.py # for instance access to ext resource, manipulation of data helper2.py # etc.","title":"Directory structure"},{"location":"development/modules/#the-initpy-file","text":"Iris loads the modules dynamically. To do so, it needs to know the name of the main class of the module and relies on __init__.py to find this information. __iris_module_interface = \"IrisEXAMPLEInterface\" Where IrisEXAMPLEInterface is the main class of the module and inherits of the base class IrisModuleInterface . Caution Failing to provide the main class in __init__.py or having the main class inherit from IrisModuleInterface will make IRIS fail each time it attempts to load the module.","title":"The init.py file"},{"location":"development/modules/#the-module-configuration","text":"Iris needs to know what the module is doing and what services it is providing. This is done via the attributes of the main class (let's say IrisEXAMPLEInterface ). The attributes are : _module_name : string - \"human\" name presented to users. _interface_version : float - version of IrisModuleInterface used. If the version is not supported, the server will refuse to register the module. _module_version : float - version of the module itself to help users keep tracks of evolutions. _module_type : string - Type of module. The available modules types are listed in IrisModuleInterface.IrisModuleTypes _pipeline_support : bool - should be set to True if it implements a pipeline process (aka module of type pipeline_module ). _pipeline_info : dict - contains the configuration of the pipeline. The following structure must be followed: pipeline_info = { # Name of the pipeline used for internal tracking. This # must be unique among all modules so pick something really unique \"pipeline_internal_name\" : \"example_pipeline\" , # The name of the pipeline presented to the user. Use something # that will help the users to identify the right pipeline \"pipeline_human_name\" : \"Example Pipeline\" , # Arguments presented to the users when they select the pipeline \"pipeline_args\" : [ [ 'some_index' , 'required' ], [ 'example_argument' , 'optional' ] ] } _module_configuration : A list of dict. The list contains each field needed by the module. This list is shown in the Iris webpage of the module configuration. Each field in an entry is mandatory. _module_configuration = [ { \"param_name\" : \"vt_api_key\" , \"param_human_name\" : \"VT API Key\" , \"param_description\" : \"Virus total API key\" , \"default\" : None , \"mandatory\" : True , \"type\" : \"sensitive_string\" }, { \"param_name\" : \"vt_key_is_premium\" , \"param_human_name\" : \"VT Key is premium\" , \"param_description\" : \"Set to True if the VT key is premium\" , \"default\" : False , \"mandatory\" : True , \"type\" : \"bool\" }, { \"param_name\" : \"vt_ip_assign_asn_as_tag\" , \"param_human_name\" : \"Assign ASN tag to IP\" , \"param_description\" : \"Assign a new tag to IOC IPs with the ASN fetched from VT\" , \"default\" : True , \"mandatory\" : True , \"type\" : \"bool\" } ] The above example results in the following.","title":"The module configuration"},{"location":"development/quick_start/processor/","text":"Processor modules In this tutorial, we demonstrate the steps to write a basic processor module which subscribes to a hook, and log what it receives when the hook is triggered. We will also add a configuration setting to offer our users the ability disable this feature. We'll call it IrisDummyModule . Project structure overview As described in the development module main page , the module should have the following structure. setup . py # Setup configuration to build the module README . md # README iris_dummy_module # Name of the package __init__ . py # Declaration of the package and main class IrisDummyConfig . py # Configuration of the module to help keep the main file clean IrisDummyInterface . py # Main class of the module While the module could have only one main file IrisDummyInterface.py , we recommend splitting its configuration into a new configuration file (here IrisDummyConfig.py ) to keep the code clear. There is no mandatory naming convention for the files or the class or the methods. We chose this one to keep things clear, and we recommend following the same. But it's up to you really. We will walk over these files one by one during this tutorial. Creating the interface The interface is the code that talks with IRIS. It implements methods that call and are called by the server. It needs to inherit IrisModuleInterface class from the IrisModuleInterface package . This module handles most of the methods needed by IRIS to recognize, set up and call the module. By inheriting this class in our interface, we avoid writing that part ourselves. Let's write our basic interface class. The name of the file has to be the name of the main class, that's the only constraint. We'll see later on why. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): pass That's it ! Actually this class is not doing anything right now. We'll need to add a few methods to register our hook later. But first we need to indicate to IRIS what is our main interface class. Remember, there is no convention restriction, so IRIS has no way to know which class it should instantiate to call our module. To do so, we need to set a specific variable in our __init__.py . iris_dummy_module/__init__.py # Set the __iris_module_interface variable to the name of our main class. # When IRIS instantiates the python module, it looks for \"module.__iris_module_interface\" # And then tries to instantiate the class \"__iris_module_interface.__iris_module_interface\", here 'IrisDummyModule.IrisDummyModule'. # That's why the python file must have the same name as the class. __iris_module_interface = \"IrisDummyModule\" Our module is now recognizable by IRIS Pretty simple right ? Writing the configuration The next step is to describe what the module is doing, its name, its configuration, etc. This is done by overwriting predefined variables of the IrisModuleInterface class. Let's create our Python configuration file and go through each variables. iris_dummy_module/IrisDummyConfig.py # Import the module types list, so we can indicate the type of our module from iris_interface.IrisModuleInterface import IrisModuleTypes # Human name displayed in the GUI Manage > Modules. This can be anything, # but try to put something meaningful, so users recognize your module. module_name = \"IrisDummy\" # Description displayed when editing the module configuration in the UI. # This can be anything, module_description = \"Provides a dummy module that replies to one hook\" # Set the interface version used. This needs to be the version of # the IrisModuleInterface package. This version is check by the server to # to ensure our module can run on this specific server interface_version = 1.1 # The version of the module itself, it can be anything module_version = 1.0 # The type of the module, here processor module_type = IrisModuleTypes . module_processor # Our module is a processor type, so it doesn't offer any pipeline pipeline_support = False # Provide no pipeline information as our module don't implement any pipeline_info = {} # The configuration of the module that will be displayed and configurable # by administrators on the UI. This describes every parameter that can # be set. module_configuration = [ { \"param_name\" : \"log_received_hook\" , \"param_human_name\" : \"Log received hook\" , \"param_description\" : \"Logs a message upon hook receiving if set to true. Otherwise do nothing.\" , \"default\" : True , \"mandatory\" : True , \"type\" : \"bool\" } ] The module configuration parameters are the following : param_name : The internal parameter name. This will be used by the module itself to fetch the value when needed. param_human_name : The name displayed on the UI for this specific parameter param_description : A description explaining what this parameter is doing to help administrators default : The default value of our parameter. Here we set to True, so after install our module is already configured and ready to log the hook. mandatory : Indicates whether the parameter is mandatory or not. If set to True and no value is provided (either by admin or by default), the module is automatically disabled by IRIS type : The type of parameter. Here a boolean, which will be rendered under the form of a checkbox. A module can have as many parameters as it needs. We now need to update our main class to set this configuration. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type pass Done! The module is now providing enough information to IRIS, so it knows exactly what our module do and what needs to be called to run it. However, our module is still doing nothing. Let's make it subscribe to an IRIS hook. Subscribing to a hook Hooks allow to be notified by IRIS when a specific event occurs (IOC creation, deletion, etc). For a comprehensive description of hooks, please see the Hooks section of this documentation. The registration (or subscription) to a hook occurs at two moments during the life of a module: When the module is added to IRIS When the configuration of the module is changed by an Admin. This allows dynamic subscription and deregistration of hooks depending on the config. These registration/deregistration events are triggered by IRIS, and are propagated to modules through the IrisModuleInterface method register_hooks [ ref ]. To register to a hook, we need to override this method and register our hook within this method. To do so, IrisModuleInterface offers us another method register_to_hook [ ref ], which we can call for each hook we want to subscribe. Here is a summary of the events: IRIS calls register_hooks of our module. This indicates it is time for us to register our hooks. Within this method, we call register_to_hook for each hook we want to subscribe Let's add this to our main class and register to the on_postload_ioc_create . This will notify use each time a new IOC is created and committed to the database. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type def register_hooks ( self , module_id : int ): \"\"\" Called by IRIS indicating it's time to register hooks. :param module_id: Module ID provided by IRIS. \"\"\" # Call the hook registration method. We need to pass the # the module_id to this method, otherwise IRIS won't know # to whom associate the hook. # The hook name needs to be a well known hook name by IRIS. status = self . register_to_hook ( module_id , iris_hook_name = 'on_postload_ioc_create' ) if status . is_failure (): # If we have a failure, log something out self . log . error ( status . get_message ()) else : # Log that we successfully registered to the hook self . log . info ( f \"Successfully subscribed to on_postload_ioc_create hook\" ) That's it! Our module has now officially subscribed to a hook and will be notified each time an IOC is created. So how the module is notified? Once again this is done by a method named hooks_handler [ ref ] that IrisModuleInterface provides, and we need to overwrite. This method is called each time one of the event associated to the hook we subscribed is triggered. It provides the name of the hook and as well as the data associated to it. By overwriting this method, we can process the hook and the data! We will add a condition in this method, that is if the administrator sets the module parameter log_received_hook to False, then the module won't log anything and simply return the data. Hint The current configuration of the module can be accessed with the attribute self._dict_conf . iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type def register_hooks ( self , module_id : int ): \"\"\" Called by IRIS indicating it's time to register hooks. :param module_id: Module ID provided by IRIS. \"\"\" # Call the hook registration method. We need to pass the # the module_id to this method, otherwise IRIS won't know # to whom associate the hook. # The hook name needs to be a well known hook name by IRIS. status = self . register_to_hook ( module_id , iris_hook_name = 'on_postload_ioc_create' ) if status . is_failure (): # If we have a failure, log something out self . log . error ( status . get_message ()) else : # Log that we successfully registered to the hook self . log . info ( f \"Successfully subscribed to on_postload_ioc_create hook\" ) def hooks_handler ( self , hook_name : str , data ): \"\"\" Called by IRIS each time one of our hook is triggered. \"\"\" # read the current configuration and only log the call if # our parameter is set to true if self . _dict_conf . get ( 'log_received_hook' ) is True : self . log . info ( f 'Received { hook_name } ' ) self . log . info ( f 'Received data of type { type ( data ) } ' ) # Return a standardized message to IRIS saying that everything is ok. # logs=list(self.message_queue) is needed, so the users can see the logs # our module generated during its execution. return InterfaceStatus . I2Success ( data = data , logs = list ( self . message_queue )) We are done ! Our module is now fully ready to register, subscribe to a hook and act when notified.","title":"Processor modules"},{"location":"development/quick_start/processor/#processor-modules","text":"In this tutorial, we demonstrate the steps to write a basic processor module which subscribes to a hook, and log what it receives when the hook is triggered. We will also add a configuration setting to offer our users the ability disable this feature. We'll call it IrisDummyModule .","title":"Processor modules"},{"location":"development/quick_start/processor/#project-structure-overview","text":"As described in the development module main page , the module should have the following structure. setup . py # Setup configuration to build the module README . md # README iris_dummy_module # Name of the package __init__ . py # Declaration of the package and main class IrisDummyConfig . py # Configuration of the module to help keep the main file clean IrisDummyInterface . py # Main class of the module While the module could have only one main file IrisDummyInterface.py , we recommend splitting its configuration into a new configuration file (here IrisDummyConfig.py ) to keep the code clear. There is no mandatory naming convention for the files or the class or the methods. We chose this one to keep things clear, and we recommend following the same. But it's up to you really. We will walk over these files one by one during this tutorial.","title":"Project structure overview"},{"location":"development/quick_start/processor/#creating-the-interface","text":"The interface is the code that talks with IRIS. It implements methods that call and are called by the server. It needs to inherit IrisModuleInterface class from the IrisModuleInterface package . This module handles most of the methods needed by IRIS to recognize, set up and call the module. By inheriting this class in our interface, we avoid writing that part ourselves. Let's write our basic interface class. The name of the file has to be the name of the main class, that's the only constraint. We'll see later on why. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): pass That's it ! Actually this class is not doing anything right now. We'll need to add a few methods to register our hook later. But first we need to indicate to IRIS what is our main interface class. Remember, there is no convention restriction, so IRIS has no way to know which class it should instantiate to call our module. To do so, we need to set a specific variable in our __init__.py . iris_dummy_module/__init__.py # Set the __iris_module_interface variable to the name of our main class. # When IRIS instantiates the python module, it looks for \"module.__iris_module_interface\" # And then tries to instantiate the class \"__iris_module_interface.__iris_module_interface\", here 'IrisDummyModule.IrisDummyModule'. # That's why the python file must have the same name as the class. __iris_module_interface = \"IrisDummyModule\" Our module is now recognizable by IRIS Pretty simple right ?","title":"Creating the interface"},{"location":"development/quick_start/processor/#writing-the-configuration","text":"The next step is to describe what the module is doing, its name, its configuration, etc. This is done by overwriting predefined variables of the IrisModuleInterface class. Let's create our Python configuration file and go through each variables. iris_dummy_module/IrisDummyConfig.py # Import the module types list, so we can indicate the type of our module from iris_interface.IrisModuleInterface import IrisModuleTypes # Human name displayed in the GUI Manage > Modules. This can be anything, # but try to put something meaningful, so users recognize your module. module_name = \"IrisDummy\" # Description displayed when editing the module configuration in the UI. # This can be anything, module_description = \"Provides a dummy module that replies to one hook\" # Set the interface version used. This needs to be the version of # the IrisModuleInterface package. This version is check by the server to # to ensure our module can run on this specific server interface_version = 1.1 # The version of the module itself, it can be anything module_version = 1.0 # The type of the module, here processor module_type = IrisModuleTypes . module_processor # Our module is a processor type, so it doesn't offer any pipeline pipeline_support = False # Provide no pipeline information as our module don't implement any pipeline_info = {} # The configuration of the module that will be displayed and configurable # by administrators on the UI. This describes every parameter that can # be set. module_configuration = [ { \"param_name\" : \"log_received_hook\" , \"param_human_name\" : \"Log received hook\" , \"param_description\" : \"Logs a message upon hook receiving if set to true. Otherwise do nothing.\" , \"default\" : True , \"mandatory\" : True , \"type\" : \"bool\" } ] The module configuration parameters are the following : param_name : The internal parameter name. This will be used by the module itself to fetch the value when needed. param_human_name : The name displayed on the UI for this specific parameter param_description : A description explaining what this parameter is doing to help administrators default : The default value of our parameter. Here we set to True, so after install our module is already configured and ready to log the hook. mandatory : Indicates whether the parameter is mandatory or not. If set to True and no value is provided (either by admin or by default), the module is automatically disabled by IRIS type : The type of parameter. Here a boolean, which will be rendered under the form of a checkbox. A module can have as many parameters as it needs. We now need to update our main class to set this configuration. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type pass Done! The module is now providing enough information to IRIS, so it knows exactly what our module do and what needs to be called to run it. However, our module is still doing nothing. Let's make it subscribe to an IRIS hook.","title":"Writing the configuration"},{"location":"development/quick_start/processor/#subscribing-to-a-hook","text":"Hooks allow to be notified by IRIS when a specific event occurs (IOC creation, deletion, etc). For a comprehensive description of hooks, please see the Hooks section of this documentation. The registration (or subscription) to a hook occurs at two moments during the life of a module: When the module is added to IRIS When the configuration of the module is changed by an Admin. This allows dynamic subscription and deregistration of hooks depending on the config. These registration/deregistration events are triggered by IRIS, and are propagated to modules through the IrisModuleInterface method register_hooks [ ref ]. To register to a hook, we need to override this method and register our hook within this method. To do so, IrisModuleInterface offers us another method register_to_hook [ ref ], which we can call for each hook we want to subscribe. Here is a summary of the events: IRIS calls register_hooks of our module. This indicates it is time for us to register our hooks. Within this method, we call register_to_hook for each hook we want to subscribe Let's add this to our main class and register to the on_postload_ioc_create . This will notify use each time a new IOC is created and committed to the database. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type def register_hooks ( self , module_id : int ): \"\"\" Called by IRIS indicating it's time to register hooks. :param module_id: Module ID provided by IRIS. \"\"\" # Call the hook registration method. We need to pass the # the module_id to this method, otherwise IRIS won't know # to whom associate the hook. # The hook name needs to be a well known hook name by IRIS. status = self . register_to_hook ( module_id , iris_hook_name = 'on_postload_ioc_create' ) if status . is_failure (): # If we have a failure, log something out self . log . error ( status . get_message ()) else : # Log that we successfully registered to the hook self . log . info ( f \"Successfully subscribed to on_postload_ioc_create hook\" ) That's it! Our module has now officially subscribed to a hook and will be notified each time an IOC is created. So how the module is notified? Once again this is done by a method named hooks_handler [ ref ] that IrisModuleInterface provides, and we need to overwrite. This method is called each time one of the event associated to the hook we subscribed is triggered. It provides the name of the hook and as well as the data associated to it. By overwriting this method, we can process the hook and the data! We will add a condition in this method, that is if the administrator sets the module parameter log_received_hook to False, then the module won't log anything and simply return the data. Hint The current configuration of the module can be accessed with the attribute self._dict_conf . iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type def register_hooks ( self , module_id : int ): \"\"\" Called by IRIS indicating it's time to register hooks. :param module_id: Module ID provided by IRIS. \"\"\" # Call the hook registration method. We need to pass the # the module_id to this method, otherwise IRIS won't know # to whom associate the hook. # The hook name needs to be a well known hook name by IRIS. status = self . register_to_hook ( module_id , iris_hook_name = 'on_postload_ioc_create' ) if status . is_failure (): # If we have a failure, log something out self . log . error ( status . get_message ()) else : # Log that we successfully registered to the hook self . log . info ( f \"Successfully subscribed to on_postload_ioc_create hook\" ) def hooks_handler ( self , hook_name : str , data ): \"\"\" Called by IRIS each time one of our hook is triggered. \"\"\" # read the current configuration and only log the call if # our parameter is set to true if self . _dict_conf . get ( 'log_received_hook' ) is True : self . log . info ( f 'Received { hook_name } ' ) self . log . info ( f 'Received data of type { type ( data ) } ' ) # Return a standardized message to IRIS saying that everything is ok. # logs=list(self.message_queue) is needed, so the users can see the logs # our module generated during its execution. return InterfaceStatus . I2Success ( data = data , logs = list ( self . message_queue )) We are done ! Our module is now fully ready to register, subscribe to a hook and act when notified.","title":"Subscribing to a hook"},{"location":"operations/api/","text":"API Iris is meant to be plug-able and be integrated with the existing environments. Through the REST API, one can do almost as much as it is possible to do through the web interface. Under the hood, the web interface is actually talking to the API. API Keys The first step is to obtain an API key. Each user is automatically attributed one when it is created. It can be found on the left panel, under username and My Settings. Token exposure In case the token is exposed and needs to be change, a new one can be generated with the Renew option. Renewing a token revokes the previous. References The API constantly evolves with IRIS and thus multiple versions exists. Use the references below to check which API version applies to your Iris version. Starting from Iris v1.4.0, the supported API version can also be checked in the UI Advanced > Server settings . IRIS Version API Version & Reference v1.2.0 API v1.0.0 v1.2.1 API v1.0.0 v1.3.0 API v1.0.1 v1.3.1 API v1.0.1 v1.4.0 API v1.0.2 How to use The API token is used as a Bearer and needs to be present in the header Authorization when issuing requests. For example, to list all the cases: curl --request GET \\ --url http://localhost:8000/manage/cases/list \\ --header 'Authorization: Bearer mWpCUVNzBMU5EnbIAK50jLPhYjKBTHZjobdogc_n_yixpJTmt9tzAf8WYDI7m5XgB9wCJnlaXlHIh9RZjtp2fA' \\ --header 'Content-Type: application/json' The only way to revoke a token is to renew the current one. Once done, the previous API token does not exist anymore on the database and it becomes ineffective. A Python client is available here to ease the automation.","title":"API"},{"location":"operations/api/#api","text":"Iris is meant to be plug-able and be integrated with the existing environments. Through the REST API, one can do almost as much as it is possible to do through the web interface. Under the hood, the web interface is actually talking to the API.","title":"API"},{"location":"operations/api/#api-keys","text":"The first step is to obtain an API key. Each user is automatically attributed one when it is created. It can be found on the left panel, under username and My Settings. Token exposure In case the token is exposed and needs to be change, a new one can be generated with the Renew option. Renewing a token revokes the previous.","title":"API Keys"},{"location":"operations/api/#references","text":"The API constantly evolves with IRIS and thus multiple versions exists. Use the references below to check which API version applies to your Iris version. Starting from Iris v1.4.0, the supported API version can also be checked in the UI Advanced > Server settings . IRIS Version API Version & Reference v1.2.0 API v1.0.0 v1.2.1 API v1.0.0 v1.3.0 API v1.0.1 v1.3.1 API v1.0.1 v1.4.0 API v1.0.2","title":"References"},{"location":"operations/api/#how-to-use","text":"The API token is used as a Bearer and needs to be present in the header Authorization when issuing requests. For example, to list all the cases: curl --request GET \\ --url http://localhost:8000/manage/cases/list \\ --header 'Authorization: Bearer mWpCUVNzBMU5EnbIAK50jLPhYjKBTHZjobdogc_n_yixpJTmt9tzAf8WYDI7m5XgB9wCJnlaXlHIh9RZjtp2fA' \\ --header 'Content-Type: application/json' The only way to revoke a token is to renew the current one. Once done, the previous API token does not exist anymore on the database and it becomes ineffective. A Python client is available here to ease the automation.","title":"How to use"},{"location":"operations/custom_attributes/","text":"Custom Attributes Introduced in IRIS v1.4.0 All the case objects can be extended with custom attributes. These attributes can be added by : Administrators via the GUI Modules (for instance, the VT module adds a VT Report attribute to each objects it analyses) Attributes offer the ability to : Add inputs for analysts to fill additional details Add static/dynamic content such as HTML/JS for enhanced possibilities. This section only describes how an administrator can add or delete attributes to an object. Management page Custom attributes can be changed in the Advanced > Objects Attributes section on the left panel. The page lists the objects for which custom attributes can be added or modified. Cases Customers Evidences Notes Tasks Assets Events IOC Attributes structure Attributes are defined in JSON which describes tabs and fields that makes the attributes. { \"Tab Name 1\" : { // De f i nes a ne w ta b \"Field 1\" : { // De f i nes a ne w f ield wi t hi n t he Tab Name 1 \"type\" : \"input_string\" , // De f i nes t he t ype o f f ield , here a s tan dard s tr i n g i n pu t \"mandatory\" : true , // I n dica tes whe t her t he f ield is ma n da t ory upo n savi n g \"value\" : \"\" // De fault value i f a n y , else emp t y }, \"Field 2\" : { // De f i nes a seco n d f ield wi t hi n t he ta b Tab Name 1 \"type\" : \"input_checkbox\" , // De f i nes a n i n pu t checkbox \"mandatory\" : false , // I n dica tes whe t her t he f ield is ma n da t ory upo n savi n g \"value\" : \"\" // De fault value i f a n y , else emp t y } }, \"VT report\" : { // De f i nes a seco n d ta b na med VT repor t \"Content\" : { // De f i nes a ne w f ield Co ntent wi t hi n t he VT Repor t \"type\" : \"html\" , // De f i nes a n HTML i nter pre te d co ntent \"value\" : \"\" // De fault value i f a n y , else emp t y } } } The code above would be rendered as : With : The native information of the object. This cannot be changed or updated The new attribute Tab Name 1 The other new attribute VT report Attributes taxonomy The available fields type are available for rendering : input_string : Standard input text input_textfield : Standard input textfield input_checkbox : Standard checkbox input_date : Standard date input input_datetime : Standard date and time input input_select : Standard select input. Need \"options\" tag to describe the available options, as a list of string. raw : A static content rendered in raw text. HTML is not be interpreted. html : A static content rendered as HTML. This is by nature prone to abuse, but at the same time allows adding custom JS scripts. Updating / resetting attributes When an attribute is updated, it will try to update all the existing objects with the new attributes. To prevent any data loss from previous attributes and attributes pushed by modules, the update is only made on attributes which don't have any values set or are type-compatibles (ie string to textfield). The migration of an attribute can however be forced in two ways, both resulting in potential attributes data loss. Good to know Migrating or overwriting attributes never change the native information of an object. It only applies to custom attributes. Partial overwrite basically resets all the values of every target objects that matches the current attribute definition. All associated values are lost. This does not impact attributes pushed by modules or previous configuration. Complete overwrite resets all attributes of every target objects, including the ones created by modules, and then applies the current attributes. All associated values are lost.","title":"Custom Attributes"},{"location":"operations/custom_attributes/#custom-attributes","text":"Introduced in IRIS v1.4.0 All the case objects can be extended with custom attributes. These attributes can be added by : Administrators via the GUI Modules (for instance, the VT module adds a VT Report attribute to each objects it analyses) Attributes offer the ability to : Add inputs for analysts to fill additional details Add static/dynamic content such as HTML/JS for enhanced possibilities. This section only describes how an administrator can add or delete attributes to an object.","title":"Custom Attributes"},{"location":"operations/custom_attributes/#management-page","text":"Custom attributes can be changed in the Advanced > Objects Attributes section on the left panel. The page lists the objects for which custom attributes can be added or modified. Cases Customers Evidences Notes Tasks Assets Events IOC","title":"Management page"},{"location":"operations/custom_attributes/#attributes-structure","text":"Attributes are defined in JSON which describes tabs and fields that makes the attributes. { \"Tab Name 1\" : { // De f i nes a ne w ta b \"Field 1\" : { // De f i nes a ne w f ield wi t hi n t he Tab Name 1 \"type\" : \"input_string\" , // De f i nes t he t ype o f f ield , here a s tan dard s tr i n g i n pu t \"mandatory\" : true , // I n dica tes whe t her t he f ield is ma n da t ory upo n savi n g \"value\" : \"\" // De fault value i f a n y , else emp t y }, \"Field 2\" : { // De f i nes a seco n d f ield wi t hi n t he ta b Tab Name 1 \"type\" : \"input_checkbox\" , // De f i nes a n i n pu t checkbox \"mandatory\" : false , // I n dica tes whe t her t he f ield is ma n da t ory upo n savi n g \"value\" : \"\" // De fault value i f a n y , else emp t y } }, \"VT report\" : { // De f i nes a seco n d ta b na med VT repor t \"Content\" : { // De f i nes a ne w f ield Co ntent wi t hi n t he VT Repor t \"type\" : \"html\" , // De f i nes a n HTML i nter pre te d co ntent \"value\" : \"\" // De fault value i f a n y , else emp t y } } } The code above would be rendered as : With : The native information of the object. This cannot be changed or updated The new attribute Tab Name 1 The other new attribute VT report","title":"Attributes structure"},{"location":"operations/custom_attributes/#attributes-taxonomy","text":"The available fields type are available for rendering : input_string : Standard input text input_textfield : Standard input textfield input_checkbox : Standard checkbox input_date : Standard date input input_datetime : Standard date and time input input_select : Standard select input. Need \"options\" tag to describe the available options, as a list of string. raw : A static content rendered in raw text. HTML is not be interpreted. html : A static content rendered as HTML. This is by nature prone to abuse, but at the same time allows adding custom JS scripts.","title":"Attributes taxonomy"},{"location":"operations/custom_attributes/#updating-resetting-attributes","text":"When an attribute is updated, it will try to update all the existing objects with the new attributes. To prevent any data loss from previous attributes and attributes pushed by modules, the update is only made on attributes which don't have any values set or are type-compatibles (ie string to textfield). The migration of an attribute can however be forced in two ways, both resulting in potential attributes data loss. Good to know Migrating or overwriting attributes never change the native information of an object. It only applies to custom attributes. Partial overwrite basically resets all the values of every target objects that matches the current attribute definition. All associated values are lost. This does not impact attributes pushed by modules or previous configuration. Complete overwrite resets all attributes of every target objects, including the ones created by modules, and then applies the current attributes. All associated values are lost.","title":"Updating / resetting attributes"},{"location":"operations/modules/","text":"Modules IRIS can be extended with modules. They can be split in two types: Pipeline modules : Allow upload and process of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualiser) Processor modules : Allow processing of IRIS data upon predefined actions / hooks. (eg: be notified when a new IOC is created and get VT/MISP insights for it). Modules (or DIM - DFIR-IRIS Modules) are actually Python packages which must be installed in the Python environment of iris-webapp and the worker (see Quick Start). Once installed in the Python environment, modules can be managed in Advanced > Modules . Info This section is only available for users with the Admin role. By default IRIS embeds multiple DIMs. IrisEVTXModule (installed but not registered) IrisVTModule (installed and registered) IrisMispModule (installed and registered) Let's take IrisEVTXModule one to explain how one can add and use a new module. Module management To add a module, the user can click on the \"+\" button: Then the user must enter the name of the pre-installed module. The name of the pip package must be used. If everything is ok, the module will appear on the list. It is currently disabled, and needs configuration before it can be enabled. To do so, the user can click on the module's name: A new text box appears, showing information about the module, and a list of parameters to configure. Each mandatory parameter must be configured to enable the module. After configuring all the mandatory parameters, the \"Enable button\" is revealed and the user can finally enable the module. That's all! The user can confirm in the summary that the module is indeed enabled and ready to use. Finally, the user can either disable or remove the module by clicking on the according buttons. Now that the module is configured and enabled, let's see how we can use it! NB: As a temporary fix, after adding and configuring a module, one must restart the IRIS services (dockers) else the worker won't have the module installed properly. How to use the module As stated in the beginning, a module extends the capabilities of IRIS. For now, it allows importing evidences of your needs into what we call a pipeline, where data will be handled in the module (checking, parsing, ingestion...). In our provided module, IrisEVTXModule ingest EVTX files, parse them as JSON, and send the results to a Splunk instance using its HTTP event collector (HEC) endpoint. In IRIS, the files are always imported in the context of a case. To import a file, the user can click on Manage cases then Update tab. In Processing pipeline , the user can pick a pipeline that will send the files to the wanted module. In our example, EVTX pipeline refers to the IrisEVTXModule module. Below, the user can fill the arguments needed by the according pipeline. Arguments can be optional. Finally, the user can import one or several files and click Update to start their processing by the module. You can see in the picture below that the user will import four EVTX files. The user can follow the upload of the different files with their respective progress bars. Once uploaded, the status of the task can be observed on the DIM Tasks page. Clicking on a Task ID shows information on the task processing. After the processing of the files by the module, the list of the imported files is stored in the Evidences tab of the according case.","title":"Modules"},{"location":"operations/modules/#modules","text":"IRIS can be extended with modules. They can be split in two types: Pipeline modules : Allow upload and process of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualiser) Processor modules : Allow processing of IRIS data upon predefined actions / hooks. (eg: be notified when a new IOC is created and get VT/MISP insights for it). Modules (or DIM - DFIR-IRIS Modules) are actually Python packages which must be installed in the Python environment of iris-webapp and the worker (see Quick Start). Once installed in the Python environment, modules can be managed in Advanced > Modules . Info This section is only available for users with the Admin role. By default IRIS embeds multiple DIMs. IrisEVTXModule (installed but not registered) IrisVTModule (installed and registered) IrisMispModule (installed and registered) Let's take IrisEVTXModule one to explain how one can add and use a new module.","title":"Modules"},{"location":"operations/modules/#module-management","text":"To add a module, the user can click on the \"+\" button: Then the user must enter the name of the pre-installed module. The name of the pip package must be used. If everything is ok, the module will appear on the list. It is currently disabled, and needs configuration before it can be enabled. To do so, the user can click on the module's name: A new text box appears, showing information about the module, and a list of parameters to configure. Each mandatory parameter must be configured to enable the module. After configuring all the mandatory parameters, the \"Enable button\" is revealed and the user can finally enable the module. That's all! The user can confirm in the summary that the module is indeed enabled and ready to use. Finally, the user can either disable or remove the module by clicking on the according buttons. Now that the module is configured and enabled, let's see how we can use it! NB: As a temporary fix, after adding and configuring a module, one must restart the IRIS services (dockers) else the worker won't have the module installed properly.","title":"Module management"},{"location":"operations/modules/#how-to-use-the-module","text":"As stated in the beginning, a module extends the capabilities of IRIS. For now, it allows importing evidences of your needs into what we call a pipeline, where data will be handled in the module (checking, parsing, ingestion...). In our provided module, IrisEVTXModule ingest EVTX files, parse them as JSON, and send the results to a Splunk instance using its HTTP event collector (HEC) endpoint. In IRIS, the files are always imported in the context of a case. To import a file, the user can click on Manage cases then Update tab. In Processing pipeline , the user can pick a pipeline that will send the files to the wanted module. In our example, EVTX pipeline refers to the IrisEVTXModule module. Below, the user can fill the arguments needed by the according pipeline. Arguments can be optional. Finally, the user can import one or several files and click Update to start their processing by the module. You can see in the picture below that the user will import four EVTX files. The user can follow the upload of the different files with their respective progress bars. Once uploaded, the status of the task can be observed on the DIM Tasks page. Clicking on a Task ID shows information on the task processing. After the processing of the files by the module, the list of the imported files is stored in the Evidences tab of the according case.","title":"How to use the module"},{"location":"operations/reports/","text":"Reports Iris has the ability to generate reports based on the data of an investigation. The reports templates can be managed in Advanced > Templates . Info This section is only available for users with the Admin role. Structure of templates Reports templates are made of tags, which are then processed and filed by the template engine of Iris. The templates can have any forms as soon as they respect the tags. An example of report is available in the source code of Iris, source > app > templates > docx_reports . The following tags are available. None are mandatory. If a tag is mistyped, the generation step will produce an error message. Hint Standard objects are accessible with {{ objectname }} . List objects can be looped: {% for object in object_list %} {{ object.attribute }} {% endfor %} case.name : Name of the case case.description : Description of the case case.open_date : Case open date case.close_date : Case close date case.opened_by : User that initially opened the case case.for_customer : Customer linked to the case case.soc_id : SOC ID number linked to the case evidences : List of evidence objects (see below - given evidence as loop variable) evidence.filename : File name of the evidence evidence.date_added : Date of registration evidence.file_hash : Hash of the evidence evidence.added_by : User who added the evidence iocs : List of IOCs objects (see below - given ioc as loop variable) ioc.ioc_value : Value of the IOC ioc.ioc_description : Description of the IOC ioc.ioc_type : Type of IOC ioc.ioc_tags : Tags linked to the IOC notes : List of notes objects (see below - given note as loop variable) note.note_title : Title of the note note.note_content : Content of the note note.note_creationdate : Creation date of the note note.note_lastupdate : Date of last update tasks : List of tasks objects (see below - given task as loop variable) task.task_title : Title of the task task.task_description : Description of the task task.task_open_date : Open date of the task task.task_last_update : Last update of the task task.task_close_date : Date of closure task.task_status : Status of the task task.task_tags : Task for the tags timeline : List of events objects (see below - given event as loop variable) event.event_title : Title of the event event.event_content : Content of the event event.event_raw : Raw content of the event event.event_date : Date when the event happened event.event_source : Source of the event event.category : Category of the event event.event_tags : Tags of the events event.last_edited_by : User who last edited the event event.assets : List of assets names linked to the event","title":"Reports"},{"location":"operations/reports/#reports","text":"Iris has the ability to generate reports based on the data of an investigation. The reports templates can be managed in Advanced > Templates . Info This section is only available for users with the Admin role.","title":"Reports"},{"location":"operations/reports/#structure-of-templates","text":"Reports templates are made of tags, which are then processed and filed by the template engine of Iris. The templates can have any forms as soon as they respect the tags. An example of report is available in the source code of Iris, source > app > templates > docx_reports . The following tags are available. None are mandatory. If a tag is mistyped, the generation step will produce an error message. Hint Standard objects are accessible with {{ objectname }} . List objects can be looped: {% for object in object_list %} {{ object.attribute }} {% endfor %} case.name : Name of the case case.description : Description of the case case.open_date : Case open date case.close_date : Case close date case.opened_by : User that initially opened the case case.for_customer : Customer linked to the case case.soc_id : SOC ID number linked to the case evidences : List of evidence objects (see below - given evidence as loop variable) evidence.filename : File name of the evidence evidence.date_added : Date of registration evidence.file_hash : Hash of the evidence evidence.added_by : User who added the evidence iocs : List of IOCs objects (see below - given ioc as loop variable) ioc.ioc_value : Value of the IOC ioc.ioc_description : Description of the IOC ioc.ioc_type : Type of IOC ioc.ioc_tags : Tags linked to the IOC notes : List of notes objects (see below - given note as loop variable) note.note_title : Title of the note note.note_content : Content of the note note.note_creationdate : Creation date of the note note.note_lastupdate : Date of last update tasks : List of tasks objects (see below - given task as loop variable) task.task_title : Title of the task task.task_description : Description of the task task.task_open_date : Open date of the task task.task_last_update : Last update of the task task.task_close_date : Date of closure task.task_status : Status of the task task.task_tags : Task for the tags timeline : List of events objects (see below - given event as loop variable) event.event_title : Title of the event event.event_content : Content of the event event.event_raw : Raw content of the event event.event_date : Date when the event happened event.event_source : Source of the event event.category : Category of the event event.event_tags : Tags of the events event.last_edited_by : User who last edited the event event.assets : List of assets names linked to the event","title":"Structure of templates"},{"location":"operations/tutorials/","text":"Tutorials Good to know These tutorials are based on IRIS v1.2.1 and offers only a basic overview of IRIS. New versions offer more features, not showcased on this page. Cases Create a new case Your browser does not support the video tag. Case summary Your browser does not support the video tag. Case notes Your browser does not support the video tag. Case IOCs Your browser does not support the video tag. Case assets Your browser does not support the video tag. Case timeline Your browser does not support the video tag. Case graph Your browser does not support the video tag. Case tasks Your browser does not support the video tag. Case evidences Your browser does not support the video tag. Case task logs Your browser does not support the video tag. Case reports Your browser does not support the video tag. Operations Global searches Your browser does not support the video tag.","title":"Tutorials"},{"location":"operations/tutorials/#tutorials","text":"Good to know These tutorials are based on IRIS v1.2.1 and offers only a basic overview of IRIS. New versions offer more features, not showcased on this page.","title":"Tutorials"},{"location":"operations/tutorials/#cases","text":"","title":"Cases"},{"location":"operations/tutorials/#create-a-new-case","text":"Your browser does not support the video tag.","title":"Create a new case"},{"location":"operations/tutorials/#case-summary","text":"Your browser does not support the video tag.","title":"Case summary"},{"location":"operations/tutorials/#case-notes","text":"Your browser does not support the video tag.","title":"Case notes"},{"location":"operations/tutorials/#case-iocs","text":"Your browser does not support the video tag.","title":"Case IOCs"},{"location":"operations/tutorials/#case-assets","text":"Your browser does not support the video tag.","title":"Case assets"},{"location":"operations/tutorials/#case-timeline","text":"Your browser does not support the video tag.","title":"Case timeline"},{"location":"operations/tutorials/#case-graph","text":"Your browser does not support the video tag.","title":"Case graph"},{"location":"operations/tutorials/#case-tasks","text":"Your browser does not support the video tag.","title":"Case tasks"},{"location":"operations/tutorials/#case-evidences","text":"Your browser does not support the video tag.","title":"Case evidences"},{"location":"operations/tutorials/#case-task-logs","text":"Your browser does not support the video tag.","title":"Case task logs"},{"location":"operations/tutorials/#case-reports","text":"Your browser does not support the video tag.","title":"Case reports"},{"location":"operations/tutorials/#operations","text":"","title":"Operations"},{"location":"operations/tutorials/#global-searches","text":"Your browser does not support the video tag.","title":"Global searches"},{"location":"operations/upgrades/","text":"Upgrades Most of the time, Iris handles upgrades of the database automatically when a new version is started, thus no specific actions are required. However , some breaking changes might need manual intervention. Please use the table below to assess if a manual action is required. From / To v1.2.1 v1.3.0 v1.3.1 v1.4.0 v1.2.1 X Auto Auto Action required - See v1.4.0 v1.3.0 X X Auto Action required - See v1.4.0 v1.3.1 X X X Action required - See v1.4.0 v1.4.0 X X X X Caution For production environments, it is highly recommended to make backups of the DB in case any issues occur during upgrades. Backing-up DB Only if you run in production and/or data is critical. List the current running docker containers docker container list Spot the IRIS DB container name or ID, and execute the backup docker exec <container> pg_dump -U postgres iris_db | \\ gzip > ../iris_db_backup.gz Ensure the backup was successful by looking at the gz file zcat ../iris_db_backup.gz | less Upgrading Stop the dockers docker-compose stop Remove the application dockers docker-compose rm app worker Get the last version of Iris git checkout master - or any tagged versions Build the new versions docker-compose build --no-cache app worker Run IRIS again. The app will handle the DB migration docker-compose up Rolling back In case something went wrong, you can rollback to your previous version and restore data. Remove the faulty docker DB docker-compose down db --volumes Checkout to the previous version working of IRIS Rebuild the images docker-compose build --no-cache Spin up the docker DB, and ONLY this one. docker-compose up db Get the ID or name of the docker DB docker container list Restore the DB data zcat ../iris_db_backup.gz | docker exec -i <container> psql -U postgres -d iris_db Spin up the rest of the dockers docker-compose up Your data should back. Version specific upgrades v1.4.0 This version brings breaking changes in the DB docker by adding a named volume instead of the default one. This implies that previous existing database is ignored as the new docker won't know which volume was previously used. To prevent this, please strictly follow the guide below . This will copy the data of the existing volume, to the new named one. Spot the IRIS DB container with docker container list . It should look like iris-web-db-x Fetch the current db volume ID ( name field with the command below) docker inspect <iris_db> | grep -A5 \"Mounts\" # Example of output \"Mounts\" : [ { \"Type\" : \"volume\" , \"Name\" : \"a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9\" , \"Source\" : \"/var/lib/docker/volumes/a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9/_data\" , \"Destination\" : \"/var/lib/postgresql/data\" , 3. Stop all the IRIS dockers : docker-compose stop 4. Create a new empty volume : docker volume create --name iris-web_db_data 5. Run a volume copy via a dummy image : docker run --rm -it -v <previous_db_volume_id>:/from:ro -v iris-web_db_data:/to alpine ash -c \"cd /from ; cp -av . /to\" # With the example of 2., this gives docker run --rm -it -v a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9:/from:ro -v iris-web_db_data:/to alpine ash -c \"cd /from ; cp -av . /to\" 6. Pull the last changes from the repository, checkout to v1.4.0 , build and run. git pull origin git checkout v1.4.0 docker-compose build docker-compose up 7. The data should be successfully transferred.","title":"Upgrades"},{"location":"operations/upgrades/#upgrades","text":"Most of the time, Iris handles upgrades of the database automatically when a new version is started, thus no specific actions are required. However , some breaking changes might need manual intervention. Please use the table below to assess if a manual action is required. From / To v1.2.1 v1.3.0 v1.3.1 v1.4.0 v1.2.1 X Auto Auto Action required - See v1.4.0 v1.3.0 X X Auto Action required - See v1.4.0 v1.3.1 X X X Action required - See v1.4.0 v1.4.0 X X X X Caution For production environments, it is highly recommended to make backups of the DB in case any issues occur during upgrades.","title":"Upgrades"},{"location":"operations/upgrades/#backing-up-db","text":"Only if you run in production and/or data is critical. List the current running docker containers docker container list Spot the IRIS DB container name or ID, and execute the backup docker exec <container> pg_dump -U postgres iris_db | \\ gzip > ../iris_db_backup.gz Ensure the backup was successful by looking at the gz file zcat ../iris_db_backup.gz | less","title":"Backing-up DB"},{"location":"operations/upgrades/#upgrading","text":"Stop the dockers docker-compose stop Remove the application dockers docker-compose rm app worker Get the last version of Iris git checkout master - or any tagged versions Build the new versions docker-compose build --no-cache app worker Run IRIS again. The app will handle the DB migration docker-compose up","title":"Upgrading"},{"location":"operations/upgrades/#rolling-back","text":"In case something went wrong, you can rollback to your previous version and restore data. Remove the faulty docker DB docker-compose down db --volumes Checkout to the previous version working of IRIS Rebuild the images docker-compose build --no-cache Spin up the docker DB, and ONLY this one. docker-compose up db Get the ID or name of the docker DB docker container list Restore the DB data zcat ../iris_db_backup.gz | docker exec -i <container> psql -U postgres -d iris_db Spin up the rest of the dockers docker-compose up Your data should back.","title":"Rolling back"},{"location":"operations/upgrades/#version-specific-upgrades","text":"","title":"Version specific upgrades"},{"location":"operations/upgrades/#v140","text":"This version brings breaking changes in the DB docker by adding a named volume instead of the default one. This implies that previous existing database is ignored as the new docker won't know which volume was previously used. To prevent this, please strictly follow the guide below . This will copy the data of the existing volume, to the new named one. Spot the IRIS DB container with docker container list . It should look like iris-web-db-x Fetch the current db volume ID ( name field with the command below) docker inspect <iris_db> | grep -A5 \"Mounts\" # Example of output \"Mounts\" : [ { \"Type\" : \"volume\" , \"Name\" : \"a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9\" , \"Source\" : \"/var/lib/docker/volumes/a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9/_data\" , \"Destination\" : \"/var/lib/postgresql/data\" , 3. Stop all the IRIS dockers : docker-compose stop 4. Create a new empty volume : docker volume create --name iris-web_db_data 5. Run a volume copy via a dummy image : docker run --rm -it -v <previous_db_volume_id>:/from:ro -v iris-web_db_data:/to alpine ash -c \"cd /from ; cp -av . /to\" # With the example of 2., this gives docker run --rm -it -v a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9:/from:ro -v iris-web_db_data:/to alpine ash -c \"cd /from ; cp -av . /to\" 6. Pull the last changes from the repository, checkout to v1.4.0 , build and run. git pull origin git checkout v1.4.0 docker-compose build docker-compose up 7. The data should be successfully transferred.","title":"v1.4.0"},{"location":"python_client/modules/","text":"Python client dfir_iris_client offers a Python interface to communicate with IRIS. It relies exclusively on the API, which means output of the methods are the same as specified in the API reference. The source code of the project is available here . Versions The Python client version follows the API versions (until the patch level). Meaning for API v1.0.1, one need to install dfir_iris_client-1.0.1 . Examples Examples of usage are available here .","title":"Python client"},{"location":"python_client/modules/#python-client","text":"dfir_iris_client offers a Python interface to communicate with IRIS. It relies exclusively on the API, which means output of the methods are the same as specified in the API reference. The source code of the project is available here .","title":"Python client"},{"location":"python_client/modules/#versions","text":"The Python client version follows the API versions (until the patch level). Meaning for API v1.0.1, one need to install dfir_iris_client-1.0.1 .","title":"Versions"},{"location":"python_client/modules/#examples","text":"Examples of usage are available here .","title":"Examples"},{"location":"python_client/references/admin/","text":"AdminHelper Bases: object Handles administrative tasks __init__ ( session ) Raise ClientApiError if unprivileged user Overlay offering administrative tasks. Initialisation of the class checks if the calling user has admin rights. If the user doesn't, a ClientApiError exception is raised. Parameters: Name Type Description Default session ClientSession object required add_asset_type ( name , description ) Add a new Asset Type. Requires admin rights Parameters: Name Type Description Default name str Name of the Asset type required description str Description of the Asset type required Returns: Type Description ApiResponse ApiResponse add_customer ( customer_name ) Creates a new customer. A new customer can be added if: customer_name is unique Requires admin rights Parameters: Name Type Description Default customer_name str Name of the customer to add. required Returns: Type Description ApiResponse object add_ioc_type ( name , description , taxonomy = None ) Add a new IOC Type. Requires admin rights Parameters: Name Type Description Default name str Name of the IOC type required description str Description of the IOC type required taxonomy str Taxonomy of the IOC Type None Returns: Type Description ApiResponse ApiResponse add_user ( login , name , password , email , is_admin = False ) Adds a new user. A new user can be successfully added if login is unique email is unique password meets the requirements of IRIS Requires admin rights Parameters: Name Type Description Default login str Username (login name) of the user to add required name str Full name of the user required password str Password of the user required email str Email of the user required is_admin bool Set to true if user is admin False Returns: Type Description ApiResponse ApiResponse deactivate_user ( user_id = None ) Deactivate a user from its user ID. Disabled users can't login interactively nor user their API keys. They do not appears in proposed user lists. Requires admin rights Parameters: Name Type Description Default user_id int User ID to deactivate None Returns: Type Description ApiResponse ApiResponse object delete_asset_type ( asset_type_id ) Delete an existing asset type by its ID. Requires admin rights Parameters: Name Type Description Default asset_type_id int Asset type to delete required Returns: Type Description ApiResponse ApiResponse delete_customer ( customer ) Deletes a customer from its ID or name. Requires admin rights Parameters: Name Type Description Default customer Union [ str , int ] Customer name or customer ID required Returns: Type Description ApiResponse ApiResponse object delete_ioc_type ( ioc_type_id ) Delete an existing IOC Type by its ID. Requires admin rights Parameters: Name Type Description Default ioc_type_id int IOC type to delete required Returns: Type Description ApiResponse ApiResponse delete_user ( login ) Deletes a user based on its login. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. Requires admin rights Parameters: Name Type Description Default login str Username (login name) of the user to delete required Returns: Type Description ApiResponse ApiResponse delete_user_by_id ( user_id ) Delete a user based on its ID. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. Requires admin rights Parameters: Name Type Description Default user_id int UserID of the user to delete required Returns: Type Description ApiResponse ApiResponse get_user ( login ) Returns a user by its login. Login names are unique in Iris. Parameters: Name Type Description Default login str username to lookup required Returns: Type Description ApiResponse ApiResponse is_user_admin () Returns True if the calling user is administrator Returns: Type Description bool Bool - true if the calling is administrator update_asset_type ( asset_type_id , name = None , description = None ) Updates an Asset type. asset_type_id needs to be a valid existing AssetType ID. Requires admin rights Parameters: Name Type Description Default asset_type_id int Asset type to update required name str Name of the IOC type None description str Description of the IOC type None Returns: Type Description ApiResponse ApiResponse update_customer ( customer_id , customer_name ) Updates an existing customer. A customer can be updated if : customer_id is a know customer ID in IRIS customer_name is unique Requires admin rights Parameters: Name Type Description Default customer_id int ID of the customer to update required customer_name str Customer name required Returns: Type Description ApiResponse object update_ioc_type ( ioc_type_id , name = None , description = None , taxonomy = None ) Updates an IOC type. ioc_type_id needs to be a valid existing IocType ID. Requires admin rights Parameters: Name Type Description Default ioc_type_id int IOC type to update required name str Name of the IOC type None description str Description of the IOC type None taxonomy str Taxonomy of the IOC Type None Returns: Type Description ApiResponse ApiResponse update_user ( login = None , name = None , password = None , email = None , is_admin = None ) Updates a user. The user can be updated if : login is unique email is unique password meets the requirements of IRIS Password can be left empty to update other attributes. Requires admin rights Parameters: Name Type Description Default login str Username (login name) of the user to update None name str Full name of the user None password str Password of the user None email str Email of the user None is_admin bool Set to true if user is admin None Returns: Type Description ApiResponse ApiResponse","title":"Admin"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper","text":"Bases: object Handles administrative tasks","title":"AdminHelper"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.__init__","text":"Raise ClientApiError if unprivileged user Overlay offering administrative tasks. Initialisation of the class checks if the calling user has admin rights. If the user doesn't, a ClientApiError exception is raised. Parameters: Name Type Description Default session ClientSession object required","title":"__init__()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.add_asset_type","text":"Add a new Asset Type. Requires admin rights Parameters: Name Type Description Default name str Name of the Asset type required description str Description of the Asset type required Returns: Type Description ApiResponse ApiResponse","title":"add_asset_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.add_customer","text":"Creates a new customer. A new customer can be added if: customer_name is unique Requires admin rights Parameters: Name Type Description Default customer_name str Name of the customer to add. required Returns: Type Description ApiResponse object","title":"add_customer()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.add_ioc_type","text":"Add a new IOC Type. Requires admin rights Parameters: Name Type Description Default name str Name of the IOC type required description str Description of the IOC type required taxonomy str Taxonomy of the IOC Type None Returns: Type Description ApiResponse ApiResponse","title":"add_ioc_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.add_user","text":"Adds a new user. A new user can be successfully added if login is unique email is unique password meets the requirements of IRIS Requires admin rights Parameters: Name Type Description Default login str Username (login name) of the user to add required name str Full name of the user required password str Password of the user required email str Email of the user required is_admin bool Set to true if user is admin False Returns: Type Description ApiResponse ApiResponse","title":"add_user()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.deactivate_user","text":"Deactivate a user from its user ID. Disabled users can't login interactively nor user their API keys. They do not appears in proposed user lists. Requires admin rights Parameters: Name Type Description Default user_id int User ID to deactivate None Returns: Type Description ApiResponse ApiResponse object","title":"deactivate_user()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_asset_type","text":"Delete an existing asset type by its ID. Requires admin rights Parameters: Name Type Description Default asset_type_id int Asset type to delete required Returns: Type Description ApiResponse ApiResponse","title":"delete_asset_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_customer","text":"Deletes a customer from its ID or name. Requires admin rights Parameters: Name Type Description Default customer Union [ str , int ] Customer name or customer ID required Returns: Type Description ApiResponse ApiResponse object","title":"delete_customer()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_ioc_type","text":"Delete an existing IOC Type by its ID. Requires admin rights Parameters: Name Type Description Default ioc_type_id int IOC type to delete required Returns: Type Description ApiResponse ApiResponse","title":"delete_ioc_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_user","text":"Deletes a user based on its login. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. Requires admin rights Parameters: Name Type Description Default login str Username (login name) of the user to delete required Returns: Type Description ApiResponse ApiResponse","title":"delete_user()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_user_by_id","text":"Delete a user based on its ID. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. Requires admin rights Parameters: Name Type Description Default user_id int UserID of the user to delete required Returns: Type Description ApiResponse ApiResponse","title":"delete_user_by_id()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.get_user","text":"Returns a user by its login. Login names are unique in Iris. Parameters: Name Type Description Default login str username to lookup required Returns: Type Description ApiResponse ApiResponse","title":"get_user()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.is_user_admin","text":"Returns True if the calling user is administrator Returns: Type Description bool Bool - true if the calling is administrator","title":"is_user_admin()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.update_asset_type","text":"Updates an Asset type. asset_type_id needs to be a valid existing AssetType ID. Requires admin rights Parameters: Name Type Description Default asset_type_id int Asset type to update required name str Name of the IOC type None description str Description of the IOC type None Returns: Type Description ApiResponse ApiResponse","title":"update_asset_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.update_customer","text":"Updates an existing customer. A customer can be updated if : customer_id is a know customer ID in IRIS customer_name is unique Requires admin rights Parameters: Name Type Description Default customer_id int ID of the customer to update required customer_name str Customer name required Returns: Type Description ApiResponse object","title":"update_customer()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.update_ioc_type","text":"Updates an IOC type. ioc_type_id needs to be a valid existing IocType ID. Requires admin rights Parameters: Name Type Description Default ioc_type_id int IOC type to update required name str Name of the IOC type None description str Description of the IOC type None taxonomy str Taxonomy of the IOC Type None Returns: Type Description ApiResponse ApiResponse","title":"update_ioc_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.update_user","text":"Updates a user. The user can be updated if : login is unique email is unique password meets the requirements of IRIS Password can be left empty to update other attributes. Requires admin rights Parameters: Name Type Description Default login str Username (login name) of the user to update None name str Full name of the user None password str Password of the user None email str Email of the user None is_admin bool Set to true if user is admin None Returns: Type Description ApiResponse ApiResponse","title":"update_user()"},{"location":"python_client/references/case/","text":"Case Bases: object Handles the case methods _assert_cid ( cid ) Verifies that the provided cid is set. This does not verify the validity of the cid. If an invalid CID is set, the requests are emitted but will likely fail. Parameters: Name Type Description Default cid int Case ID required Returns: Type Description int CaseID as int add_asset ( name , asset_type , analysis_status , compromised = None , tags = None , description = None , domain = None , ip = None , additional_info = None , ioc_links = None , custom_attributes = None , cid = None ) Adds an asset to the target case id. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default name str Name of the asset to add required asset_type Union [ str , int ] Name or ID of the asset type required description str Description of the asset None domain str Domain of the asset None ip str IP of the asset None additional_info str Additional information, None analysis_status Union [ str , int ] Status of the analysis required compromised bool Set to true if asset is compromised None tags List [ str ] List of tags None ioc_links List [ int ] List of IOC to link to this asset None custom_attributes dict Custom attributes of the asset None cid int int - Case ID None Returns: Type Description ApiResponse APIResponse add_case ( case_name , case_description , case_customer , soc_id , custom_attributes = None , create_customer = False ) Creates a new case. If create_customer is set to true and the customer doesn't exist, it is created. Otherwise an error is returned. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default case_name str case_name required case_description str Description of the case required case_customer Union [ str , int ] Name or ID of the customer required soc_id str SOC Number required custom_attributes dict Custom attributes of the case None create_customer Set to true to create the customer is doesn't exists. (Default value = False) False Returns: Type Description ApiResponse ApiResponse object add_event ( title , date_time , content = None , raw_content = None , source = None , linked_assets = None , category = None , tags = None , color = None , display_in_graph = None , display_in_summary = None , custom_attributes = None , cid = None , timezone_string = None ) Adds a new event to the timeline. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default title str Title of the event required date_time datetime Datetime of the event, including timezone required content str Content of the event (displayed in timeline on GUI) None raw_content str Raw content of the event (displayed in detailed event on GUI) None source str Source of the event None linked_assets list List of assets to link with this event None category Union [ int , str ] Category of the event (MITRE ATT@CK) None color str Left border of the event in the timeline None display_in_graph bool Set to true to display in graph page - Default to true None display_in_summary bool Set to true to display in Summary - Default to false None tags list A list of strings to add as tags None custom_attributes str Custom attributes of the event None timezone_string str Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used None cid int Case ID None Returns: Type Description ApiResponse APIResponse object add_evidence ( filename , file_size , description = None , file_hash = None , custom_attributes = None , cid = None ) Adds a new evidence to the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default filename str name of the evidence required file_size int Size of the file required description str Description of the evidence None file_hash str hash of the evidence None custom_attributes dict Custom attributes of the evidences None cid int Case ID None Returns: Type Description ApiResponse APIResponse object add_global_task ( title , status , assignee , description = None , tags = None ) Adds a new task. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Parameters: Name Type Description Default title str Title of the task required description str Description of the task None assignee Union [ str , int ] Assignee ID or username required tags list Tags of the task None status Union [ str , int ] String or status ID, need to be a valid status required Returns: Type Description ApiResponse APIResponse object add_ioc ( value , ioc_type , description = None , ioc_tlp = None , ioc_tags = None , custom_attributes = None , cid = None ) Adds an ioc to the target case id. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default value str Value of the IOC required ioc_type Union [ str , int ] Type of IOC, either name or type ID required description str Optional - Description of the IOC None ioc_tlp Union [ str , int ] TLP name or tlp ID. Default is orange None ioc_tags list List of tags to add None custom_attributes dict Custom attributes of the ioc None cid int Case ID None Returns: Type Description ApiResponse APIResponse add_note ( note_title , note_content , group_id , custom_attributes = None , cid = None ) Creates a new note. Case ID and group note ID need to match the case in which the note is stored. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default cid int Case ID None note_title str Title of the note required note_content str Content of the note required group_id int Target group to attach the note to required custom_attributes dict Custom attributes of the note None Returns: Type Description ApiResponse APIResponse object add_notes_group ( group_title = None , cid = None ) Creates a new notes group in the target cid case. Group_title can be an existing group, there is no uniqueness. Parameters: Name Type Description Default cid int Case ID None group_title str Name of the group to add None Returns: Type Description ApiResponse APIResponse object add_task ( title , status , assignee , description = None , tags = None , custom_attributes = None , cid = None ) Adds a new task to the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default title str Title of the task required description str Description of the task None assignee Union [ str , int ] Assignee ID or username required cid int Case ID None tags list Tags of the task None status Union [ str , int ] String or status ID, need to be a valid status required custom_attributes dict Custom attributes of the task None Returns: Type Description ApiResponse APIResponse object add_task_log ( message , cid = None ) Adds a new task log that will appear under activities Parameters: Name Type Description Default message str Message to log required cid int Case ID None Returns: Type Description ApiResponse ApiResponse asset_exists ( asset_id , cid = None ) Returns true if asset_id exists in the context of the current case or cid. This method is an overlay of get_asset and thus not performant. Parameters: Name Type Description Default asset_id int Asset to lookup required cid int Case ID None Returns: Type Description bool True if exists else false case_id_exists ( cid ) Checks if a case id is valid by probing the summary endpoint. This method returns true if the probe was successful. If False is returned it might not indicate the case doesn't exist but might be the result of a request malfunction (server down, invalid API token, etc). Parameters: Name Type Description Default cid int Case ID to check required Returns: Type Description bool True if case ID exists otherwise false delete_asset ( asset_id , cid = None ) Deletes an asset identified by asset_id. CID must match the case in which the asset is stored. Parameters: Name Type Description Default asset_id int ID of the asset to delete required cid int Case ID None Returns: Type Description ApiResponse APIResponse object delete_case ( cid ) Deletes a case based on its ID. All objects associated to the case are deleted. This includes : - assets, - iocs that are only referenced in this case - notes - summary - events - evidences - tasklogs Parameters: Name Type Description Default cid int Case to delete required Returns: Type Description ApiResponse ApiResponse delete_event ( event_id , cid = None ) Deletes an event from its ID. CID must match the case in which the event is stored Parameters: Name Type Description Default event_id int Event to delete required cid int Case ID None Returns: Type Description ApiResponse APIResponse object delete_evidence ( evidence_id , cid = None ) Deletes an evidence from its ID. evidence_id needs to be an existing evidence in the target case. Parameters: Name Type Description Default evidence_id int int - Evidence to delete required cid int int - Case ID None Returns: Type Description APIResponse object delete_global_task ( task_id ) Deletes a global task from its ID. task_id needs to be an existing task in the database. Parameters: Name Type Description Default task_id int int - Task to delete required Returns: Type Description ApiResponse APIResponse object delete_ioc ( ioc_id , cid = None ) Deletes an IOC from its ID. CID must match the case in which the ioc is stored. Parameters: Name Type Description Default ioc_id int ID of the ioc required cid int Case ID None Returns: Type Description ApiResponse APIResponse object delete_note ( note_id , cid = None ) Deletes a note. note_id needs to be a valid existing note in the target case. Parameters: Name Type Description Default cid int Case ID None note_id int Name of the note to delete required Returns: Type Description ApiResponse APIResponse object delete_notes_group ( group_id , cid = None ) Deletes a notes group. All notes in the target groups are deleted ! There is not way to get the notes back. Case ID needs to match the case where the group is stored. Parameters: Name Type Description Default cid int Case ID None group_id int ID of the group required Returns: Type Description ApiResponse APIResponse object delete_task ( task_id , cid = None ) Deletes a task from its ID. CID must match the case in which the task is stored. Parameters: Name Type Description Default task_id int Task to delete required cid int Case ID None Returns: Type Description ApiResponse APIResponse object get_asset ( asset_id , cid = None ) Returns an asset information from its ID. Parameters: Name Type Description Default asset_id int ID of the asset to fetch required cid int Case ID None Returns: Type Description ApiResponse APIResponse object get_case ( cid ) Gets an existing case from its ID Parameters: Name Type Description Default cid int CaseID to fetch required Returns: Type Description ApiResponse ApiResponse object get_event ( event_id , cid = None ) Returns an event from the timeline Parameters: Name Type Description Default event_id int ID of the event to fetch required cid int Case ID None Returns: Type Description ApiResponse APIResponse object get_evidence ( evidence_id , cid = None ) Returns an evidence from its ID. evidence_id needs to be an existing evidence in the target case. Parameters: Name Type Description Default evidence_id int Evidence ID to lookup required cid int Case ID None Returns: Type Description ApiResponse APIResponse object get_global_task ( task_id ) Returns a global task from its ID. Parameters: Name Type Description Default task_id int Task ID to lookup required Returns: Type Description ApiResponse APIResponse object get_ioc ( ioc_id , cid = None ) Returns an IOC. ioc_id needs to be an existing ioc in the provided case ID. Parameters: Name Type Description Default ioc_id int IOC ID required cid int Case ID None Returns: Type Description ApiResponse APIResponse object get_note ( note_id , cid = None ) Fetches a note. note_id needs to be a valid existing note in the target case. Parameters: Name Type Description Default cid int Case ID None note_id int ID of the note to fetch required Returns: Type Description ApiResponse APIResponse object get_notes_group ( group_id , cid = None ) Returns a notes group based on its ID. The group ID needs to match the CID where it is stored. Parameters: Name Type Description Default group_id int Group ID to fetch required cid int Case ID (Default value = None) None Returns: Type Description ApiResponse APIResponse object get_summary ( cid = None ) Returns the summary of the specified case id. Parameters: Name Type Description Default cid int Case ID (Default value = None) None Returns: Type Description ApiResponse APIResponse object get_task ( task_id , cid = None ) Returns a task from its ID. task_id needs to be a valid task in the target case. Parameters: Name Type Description Default task_id int Task ID to lookup required cid int Case ID None Returns: Type Description ApiResponse APIResponse object list_assets ( cid = None ) Returns a list of all assets of the target case. Parameters: Name Type Description Default cid int int - Case ID None Returns: Type Description ApiResponse APIResponse list_cases () Returns a list of all the cases :return: ApiResponse list_events ( filter_by_asset = 0 , cid = None ) Returns a list of events from the timeline. filter_by_asset can be used to return only the events linked to a specific asset. In case the asset doesn't exist, an empty timeline is returned. Parameters: Name Type Description Default filter_by_asset int Select the timeline of a specific asset by setting an existing asset ID 0 cid int Case ID None Returns: Type Description ApiResponse APIResponse object list_evidences ( cid = None ) Returns a list of evidences. Parameters: Name Type Description Default cid int Case ID None Returns: Type Description ApiResponse ApiResponse object list_global_tasks () Returns: Type Description ApiResponse return: ApiResponse object list_iocs ( cid = None ) Returns a list of all iocs of the target case. Parameters: Name Type Description Default cid int Case ID None Returns: Type Description ApiResponse APIResponse list_notes_groups ( cid = None ) Returns a list of notes groups of the target cid case Parameters: Name Type Description Default cid int Case ID (Default value = None) None Returns: Type Description ApiResponse APIResponse object list_tasks ( cid = None ) Returns a list of tasks linked to the provided case. Parameters: Name Type Description Default cid int Case ID None Returns: Type Description ApiResponse ApiResponse object search_notes ( search_term , cid = None ) Searches in notes. Case ID and group note ID need to match the case in which the notes are stored. Only the titles and notes ID of the matching notes are return, not the actual content. Use % for wildcard. Parameters: Name Type Description Default cid int int - Case ID None search_term str str - Term to search in notes required Returns: Type Description ApiResponse APIResponse object set_cid ( cid ) Sets the current cid for the Case instance. It can be override be setting the cid of each method though not recommended to keep consistency. Parameters: Name Type Description Default cid int Case ID required Returns: Type Description bool Always true set_summary ( summary_content = None , cid = None ) Sets the summary of the specified case id. Warning This completely replace the current content of the summary. Any co-worker working on the summary will receive an overwrite order from the server. The order is immediately received by web socket. This method should probably be only used when setting a new case. Parameters: Name Type Description Default summary_content str Content of the summary to push. This will completely replace the current content (Default value = None) None cid int Case ID (Default value = None) None Returns: Type Description ApiResponse APIResponse object update_asset ( asset_id , name = None , asset_type = None , tags = None , analysis_status = None , description = None , domain = None , ip = None , additional_info = None , ioc_links = None , compromised = None , custom_attributes = None , cid = None , no_sync = False ) Updates an asset. asset_id needs to be an existing asset in the target case cid. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default asset_id int ID of the asset to update required name str Name of the asset None asset_type Union [ str , int ] Name or ID of the asset type None tags List [ str ] List of tags None description str Description of the asset None domain str Domain of the asset None ip str IP of the asset None additional_info str Additional information, None analysis_status Union [ str , int ] Status of the analysis None ioc_links List [ int ] List of IOC to link to this asset None compromised bool True is asset is compromised None custom_attributes dict Custom attributes of the asset None cid int Case ID None Returns: Type Description ApiResponse APIResponse update_event ( event_id , title = None , date_time = None , content = None , raw_content = None , source = None , linked_assets = None , category = None , tags = None , color = None , display_in_graph = None , display_in_summary = None , custom_attributes = None , cid = None , timezone_string = None ) Updates an event of the timeline. event_id needs to be an existing event in the target case. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default event_id int Event ID to update required title str Title of the event None date_time datetime Datetime of the event, including timezone None content str Content of the event (displayed in timeline on GUI) None raw_content str Raw content of the event (displayed in detailed event on GUI) None source str Source of the event None linked_assets list List of assets to link with this event None category Union [ int , str ] Category of the event (MITRE ATT@CK) None color str Left border of the event in the timeline None display_in_graph bool Set to true to display in graph page - Default to true None display_in_summary bool Set to true to display in Summary - Default to false None tags list A list of strings to add as tags None custom_attributes dict Custom attributes of the event None timezone_string str Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used None cid int Case ID None Returns: Type Description ApiResponse APIResponse object update_evidence ( evidence_id , filename = None , file_size = None , description = None , file_hash = None , custom_attributes = None , cid = None ) Updates an evidence of the matching case. evidence_id needs to be an existing evidence in the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default evidence_id int ID of the evidence required filename str name of the evidence None file_size int Size of the file None description str Description of the evidence None file_hash str hash of the evidence None custom_attributes dict custom attributes of the evidences None cid int Case ID None Returns: Type Description ApiResponse APIResponse object update_global_task ( task_id , title = None , status = None , assignee = None , description = None , tags = None ) Updates a task. task_id needs to be an existing task in the database. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Parameters: Name Type Description Default task_id int ID of the task to update required title str Title of the task None description str Description of the task None assignee Union [ int , str ] Assignee ID or assignee username None tags list Tags of the task None status Union [ str , int ] String status, need to be a valid status None Returns: Type Description ApiResponse APIResponse object update_ioc ( ioc_id , value = None , ioc_type = None , description = None , ioc_tlp = None , ioc_tags = None , custom_attributes = None , cid = None ) Updates an existing IOC. ioc_id needs to be an existing ioc in the provided case ID. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default ioc_id int IOC ID to update required value str Value of the IOC None ioc_type Union [ str , int ] Type of IOC, either name or type ID None description str Description of the IOC None ioc_tlp Union [ str , int ] TLP name or tlp ID. Default is orange None ioc_tags list List of tags to add, None custom_attributes dict Custom attributes of the IOC None cid int Case ID None Returns: Type Description ApiResponse APIResponse object update_note ( note_id , note_title = None , note_content = None , custom_attributes = None , cid = None ) Updates a note. note_id needs to be a valid existing note in the target case. Only the content of the set fields is replaced. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default cid int Case ID None note_id int Name of the note to update required note_content str Content of the note None note_title str Title of the note None custom_attributes dict Custom attributes of the note None Returns: Type Description ApiResponse APIResponse object update_notes_group ( group_id , group_title , cid = None ) Updates a notes group in the target cid case. group_id need to be an existing group in the target case. group_title can be an existing group, there is no uniqueness. Parameters: Name Type Description Default cid int Case ID None group_id int Group ID to update required group_title str Name of the group required Returns: Type Description ApiResponse APIResponse object update_task ( task_id , title = None , status = None , assignee = None , description = None , tags = None , custom_attributes = None , cid = None ) Updates a task. task_id needs to be a valid task in the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default task_id int ID of the task to update required title str Title of the task None description str Description of the task None assignee Union [ int , str ] Assignee ID or assignee username None cid int Case ID None tags list Tags of the task None status Union [ str , int ] String status, need to be a valid status None custom_attributes dict Custom attributes of the task None Returns: Type Description ApiResponse APIResponse object","title":"Case"},{"location":"python_client/references/case/#dfir_iris_client.case.Case","text":"Bases: object Handles the case methods","title":"Case"},{"location":"python_client/references/case/#dfir_iris_client.case.Case._assert_cid","text":"Verifies that the provided cid is set. This does not verify the validity of the cid. If an invalid CID is set, the requests are emitted but will likely fail. Parameters: Name Type Description Default cid int Case ID required Returns: Type Description int CaseID as int","title":"_assert_cid()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_asset","text":"Adds an asset to the target case id. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default name str Name of the asset to add required asset_type Union [ str , int ] Name or ID of the asset type required description str Description of the asset None domain str Domain of the asset None ip str IP of the asset None additional_info str Additional information, None analysis_status Union [ str , int ] Status of the analysis required compromised bool Set to true if asset is compromised None tags List [ str ] List of tags None ioc_links List [ int ] List of IOC to link to this asset None custom_attributes dict Custom attributes of the asset None cid int int - Case ID None Returns: Type Description ApiResponse APIResponse","title":"add_asset()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_case","text":"Creates a new case. If create_customer is set to true and the customer doesn't exist, it is created. Otherwise an error is returned. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default case_name str case_name required case_description str Description of the case required case_customer Union [ str , int ] Name or ID of the customer required soc_id str SOC Number required custom_attributes dict Custom attributes of the case None create_customer Set to true to create the customer is doesn't exists. (Default value = False) False Returns: Type Description ApiResponse ApiResponse object","title":"add_case()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_event","text":"Adds a new event to the timeline. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default title str Title of the event required date_time datetime Datetime of the event, including timezone required content str Content of the event (displayed in timeline on GUI) None raw_content str Raw content of the event (displayed in detailed event on GUI) None source str Source of the event None linked_assets list List of assets to link with this event None category Union [ int , str ] Category of the event (MITRE ATT@CK) None color str Left border of the event in the timeline None display_in_graph bool Set to true to display in graph page - Default to true None display_in_summary bool Set to true to display in Summary - Default to false None tags list A list of strings to add as tags None custom_attributes str Custom attributes of the event None timezone_string str Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used None cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"add_event()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_evidence","text":"Adds a new evidence to the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default filename str name of the evidence required file_size int Size of the file required description str Description of the evidence None file_hash str hash of the evidence None custom_attributes dict Custom attributes of the evidences None cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"add_evidence()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_global_task","text":"Adds a new task. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Parameters: Name Type Description Default title str Title of the task required description str Description of the task None assignee Union [ str , int ] Assignee ID or username required tags list Tags of the task None status Union [ str , int ] String or status ID, need to be a valid status required Returns: Type Description ApiResponse APIResponse object","title":"add_global_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_ioc","text":"Adds an ioc to the target case id. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default value str Value of the IOC required ioc_type Union [ str , int ] Type of IOC, either name or type ID required description str Optional - Description of the IOC None ioc_tlp Union [ str , int ] TLP name or tlp ID. Default is orange None ioc_tags list List of tags to add None custom_attributes dict Custom attributes of the ioc None cid int Case ID None Returns: Type Description ApiResponse APIResponse","title":"add_ioc()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_note","text":"Creates a new note. Case ID and group note ID need to match the case in which the note is stored. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default cid int Case ID None note_title str Title of the note required note_content str Content of the note required group_id int Target group to attach the note to required custom_attributes dict Custom attributes of the note None Returns: Type Description ApiResponse APIResponse object","title":"add_note()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_notes_group","text":"Creates a new notes group in the target cid case. Group_title can be an existing group, there is no uniqueness. Parameters: Name Type Description Default cid int Case ID None group_title str Name of the group to add None Returns: Type Description ApiResponse APIResponse object","title":"add_notes_group()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_task","text":"Adds a new task to the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default title str Title of the task required description str Description of the task None assignee Union [ str , int ] Assignee ID or username required cid int Case ID None tags list Tags of the task None status Union [ str , int ] String or status ID, need to be a valid status required custom_attributes dict Custom attributes of the task None Returns: Type Description ApiResponse APIResponse object","title":"add_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_task_log","text":"Adds a new task log that will appear under activities Parameters: Name Type Description Default message str Message to log required cid int Case ID None Returns: Type Description ApiResponse ApiResponse","title":"add_task_log()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.asset_exists","text":"Returns true if asset_id exists in the context of the current case or cid. This method is an overlay of get_asset and thus not performant. Parameters: Name Type Description Default asset_id int Asset to lookup required cid int Case ID None Returns: Type Description bool True if exists else false","title":"asset_exists()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.case_id_exists","text":"Checks if a case id is valid by probing the summary endpoint. This method returns true if the probe was successful. If False is returned it might not indicate the case doesn't exist but might be the result of a request malfunction (server down, invalid API token, etc). Parameters: Name Type Description Default cid int Case ID to check required Returns: Type Description bool True if case ID exists otherwise false","title":"case_id_exists()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_asset","text":"Deletes an asset identified by asset_id. CID must match the case in which the asset is stored. Parameters: Name Type Description Default asset_id int ID of the asset to delete required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"delete_asset()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_case","text":"Deletes a case based on its ID. All objects associated to the case are deleted. This includes : - assets, - iocs that are only referenced in this case - notes - summary - events - evidences - tasklogs Parameters: Name Type Description Default cid int Case to delete required Returns: Type Description ApiResponse ApiResponse","title":"delete_case()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_event","text":"Deletes an event from its ID. CID must match the case in which the event is stored Parameters: Name Type Description Default event_id int Event to delete required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"delete_event()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_evidence","text":"Deletes an evidence from its ID. evidence_id needs to be an existing evidence in the target case. Parameters: Name Type Description Default evidence_id int int - Evidence to delete required cid int int - Case ID None Returns: Type Description APIResponse object","title":"delete_evidence()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_global_task","text":"Deletes a global task from its ID. task_id needs to be an existing task in the database. Parameters: Name Type Description Default task_id int int - Task to delete required Returns: Type Description ApiResponse APIResponse object","title":"delete_global_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_ioc","text":"Deletes an IOC from its ID. CID must match the case in which the ioc is stored. Parameters: Name Type Description Default ioc_id int ID of the ioc required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"delete_ioc()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_note","text":"Deletes a note. note_id needs to be a valid existing note in the target case. Parameters: Name Type Description Default cid int Case ID None note_id int Name of the note to delete required Returns: Type Description ApiResponse APIResponse object","title":"delete_note()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_notes_group","text":"Deletes a notes group. All notes in the target groups are deleted ! There is not way to get the notes back. Case ID needs to match the case where the group is stored. Parameters: Name Type Description Default cid int Case ID None group_id int ID of the group required Returns: Type Description ApiResponse APIResponse object","title":"delete_notes_group()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_task","text":"Deletes a task from its ID. CID must match the case in which the task is stored. Parameters: Name Type Description Default task_id int Task to delete required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"delete_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_asset","text":"Returns an asset information from its ID. Parameters: Name Type Description Default asset_id int ID of the asset to fetch required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"get_asset()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_case","text":"Gets an existing case from its ID Parameters: Name Type Description Default cid int CaseID to fetch required Returns: Type Description ApiResponse ApiResponse object","title":"get_case()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_event","text":"Returns an event from the timeline Parameters: Name Type Description Default event_id int ID of the event to fetch required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"get_event()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_evidence","text":"Returns an evidence from its ID. evidence_id needs to be an existing evidence in the target case. Parameters: Name Type Description Default evidence_id int Evidence ID to lookup required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"get_evidence()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_global_task","text":"Returns a global task from its ID. Parameters: Name Type Description Default task_id int Task ID to lookup required Returns: Type Description ApiResponse APIResponse object","title":"get_global_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_ioc","text":"Returns an IOC. ioc_id needs to be an existing ioc in the provided case ID. Parameters: Name Type Description Default ioc_id int IOC ID required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"get_ioc()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_note","text":"Fetches a note. note_id needs to be a valid existing note in the target case. Parameters: Name Type Description Default cid int Case ID None note_id int ID of the note to fetch required Returns: Type Description ApiResponse APIResponse object","title":"get_note()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_notes_group","text":"Returns a notes group based on its ID. The group ID needs to match the CID where it is stored. Parameters: Name Type Description Default group_id int Group ID to fetch required cid int Case ID (Default value = None) None Returns: Type Description ApiResponse APIResponse object","title":"get_notes_group()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_summary","text":"Returns the summary of the specified case id. Parameters: Name Type Description Default cid int Case ID (Default value = None) None Returns: Type Description ApiResponse APIResponse object","title":"get_summary()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_task","text":"Returns a task from its ID. task_id needs to be a valid task in the target case. Parameters: Name Type Description Default task_id int Task ID to lookup required cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"get_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_assets","text":"Returns a list of all assets of the target case. Parameters: Name Type Description Default cid int int - Case ID None Returns: Type Description ApiResponse APIResponse","title":"list_assets()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_cases","text":"Returns a list of all the cases :return: ApiResponse","title":"list_cases()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_events","text":"Returns a list of events from the timeline. filter_by_asset can be used to return only the events linked to a specific asset. In case the asset doesn't exist, an empty timeline is returned. Parameters: Name Type Description Default filter_by_asset int Select the timeline of a specific asset by setting an existing asset ID 0 cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"list_events()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_evidences","text":"Returns a list of evidences. Parameters: Name Type Description Default cid int Case ID None Returns: Type Description ApiResponse ApiResponse object","title":"list_evidences()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_global_tasks","text":"Returns: Type Description ApiResponse return: ApiResponse object","title":"list_global_tasks()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_iocs","text":"Returns a list of all iocs of the target case. Parameters: Name Type Description Default cid int Case ID None Returns: Type Description ApiResponse APIResponse","title":"list_iocs()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_notes_groups","text":"Returns a list of notes groups of the target cid case Parameters: Name Type Description Default cid int Case ID (Default value = None) None Returns: Type Description ApiResponse APIResponse object","title":"list_notes_groups()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_tasks","text":"Returns a list of tasks linked to the provided case. Parameters: Name Type Description Default cid int Case ID None Returns: Type Description ApiResponse ApiResponse object","title":"list_tasks()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.search_notes","text":"Searches in notes. Case ID and group note ID need to match the case in which the notes are stored. Only the titles and notes ID of the matching notes are return, not the actual content. Use % for wildcard. Parameters: Name Type Description Default cid int int - Case ID None search_term str str - Term to search in notes required Returns: Type Description ApiResponse APIResponse object","title":"search_notes()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.set_cid","text":"Sets the current cid for the Case instance. It can be override be setting the cid of each method though not recommended to keep consistency. Parameters: Name Type Description Default cid int Case ID required Returns: Type Description bool Always true","title":"set_cid()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.set_summary","text":"Sets the summary of the specified case id. Warning This completely replace the current content of the summary. Any co-worker working on the summary will receive an overwrite order from the server. The order is immediately received by web socket. This method should probably be only used when setting a new case. Parameters: Name Type Description Default summary_content str Content of the summary to push. This will completely replace the current content (Default value = None) None cid int Case ID (Default value = None) None Returns: Type Description ApiResponse APIResponse object","title":"set_summary()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_asset","text":"Updates an asset. asset_id needs to be an existing asset in the target case cid. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default asset_id int ID of the asset to update required name str Name of the asset None asset_type Union [ str , int ] Name or ID of the asset type None tags List [ str ] List of tags None description str Description of the asset None domain str Domain of the asset None ip str IP of the asset None additional_info str Additional information, None analysis_status Union [ str , int ] Status of the analysis None ioc_links List [ int ] List of IOC to link to this asset None compromised bool True is asset is compromised None custom_attributes dict Custom attributes of the asset None cid int Case ID None Returns: Type Description ApiResponse APIResponse","title":"update_asset()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_event","text":"Updates an event of the timeline. event_id needs to be an existing event in the target case. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default event_id int Event ID to update required title str Title of the event None date_time datetime Datetime of the event, including timezone None content str Content of the event (displayed in timeline on GUI) None raw_content str Raw content of the event (displayed in detailed event on GUI) None source str Source of the event None linked_assets list List of assets to link with this event None category Union [ int , str ] Category of the event (MITRE ATT@CK) None color str Left border of the event in the timeline None display_in_graph bool Set to true to display in graph page - Default to true None display_in_summary bool Set to true to display in Summary - Default to false None tags list A list of strings to add as tags None custom_attributes dict Custom attributes of the event None timezone_string str Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used None cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"update_event()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_evidence","text":"Updates an evidence of the matching case. evidence_id needs to be an existing evidence in the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default evidence_id int ID of the evidence required filename str name of the evidence None file_size int Size of the file None description str Description of the evidence None file_hash str hash of the evidence None custom_attributes dict custom attributes of the evidences None cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"update_evidence()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_global_task","text":"Updates a task. task_id needs to be an existing task in the database. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Parameters: Name Type Description Default task_id int ID of the task to update required title str Title of the task None description str Description of the task None assignee Union [ int , str ] Assignee ID or assignee username None tags list Tags of the task None status Union [ str , int ] String status, need to be a valid status None Returns: Type Description ApiResponse APIResponse object","title":"update_global_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_ioc","text":"Updates an existing IOC. ioc_id needs to be an existing ioc in the provided case ID. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default ioc_id int IOC ID to update required value str Value of the IOC None ioc_type Union [ str , int ] Type of IOC, either name or type ID None description str Description of the IOC None ioc_tlp Union [ str , int ] TLP name or tlp ID. Default is orange None ioc_tags list List of tags to add, None custom_attributes dict Custom attributes of the IOC None cid int Case ID None Returns: Type Description ApiResponse APIResponse object","title":"update_ioc()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_note","text":"Updates a note. note_id needs to be a valid existing note in the target case. Only the content of the set fields is replaced. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default cid int Case ID None note_id int Name of the note to update required note_content str Content of the note None note_title str Title of the note None custom_attributes dict Custom attributes of the note None Returns: Type Description ApiResponse APIResponse object","title":"update_note()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_notes_group","text":"Updates a notes group in the target cid case. group_id need to be an existing group in the target case. group_title can be an existing group, there is no uniqueness. Parameters: Name Type Description Default cid int Case ID None group_id int Group ID to update required group_title str Name of the group required Returns: Type Description ApiResponse APIResponse object","title":"update_notes_group()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_task","text":"Updates a task. task_id needs to be a valid task in the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. Parameters: Name Type Description Default task_id int ID of the task to update required title str Title of the task None description str Description of the task None assignee Union [ int , str ] Assignee ID or assignee username None cid int Case ID None tags list Tags of the task None status Union [ str , int ] String status, need to be a valid status None custom_attributes dict Custom attributes of the task None Returns: Type Description ApiResponse APIResponse object","title":"update_task()"},{"location":"python_client/references/customer/","text":"Customer Bases: object Handles the customer methods get_customer_by_id ( customer_id ) Returns a customer from its ID Parameters: Name Type Description Default customer_id int Customer ID to look up required Returns: Type Description ApiResponse ApiResponse object list_customers () Returns a list of the available customers :return: ApiResponse object Returns: Type Description ApiResponse ApiResponse object lookup_customer ( customer_name ) Returns a customer ID if customer name is found. Customer names are unique in the database. Customer ID is in the data section of the API response aka id = parse_api_data(resp.get_data(), 'customer_id') Parameters: Name Type Description Default customer_name Name of the customer to lookup required Returns: Type Description ApiResponse ApiResponse object","title":"Customer"},{"location":"python_client/references/customer/#dfir_iris_client.customer.Customer","text":"Bases: object Handles the customer methods","title":"Customer"},{"location":"python_client/references/customer/#dfir_iris_client.customer.Customer.get_customer_by_id","text":"Returns a customer from its ID Parameters: Name Type Description Default customer_id int Customer ID to look up required Returns: Type Description ApiResponse ApiResponse object","title":"get_customer_by_id()"},{"location":"python_client/references/customer/#dfir_iris_client.customer.Customer.list_customers","text":"Returns a list of the available customers :return: ApiResponse object Returns: Type Description ApiResponse ApiResponse object","title":"list_customers()"},{"location":"python_client/references/customer/#dfir_iris_client.customer.Customer.lookup_customer","text":"Returns a customer ID if customer name is found. Customer names are unique in the database. Customer ID is in the data section of the API response aka id = parse_api_data(resp.get_data(), 'customer_id') Parameters: Name Type Description Default customer_name Name of the customer to lookup required Returns: Type Description ApiResponse ApiResponse object","title":"lookup_customer()"},{"location":"python_client/references/global_search/","text":"global_search_ioc ( session , search_term ) Searches an IOC across all investigation Parameters: Name Type Description Default session ClientSession Client Session to use for request required search_term str Search term to search for IOC required Returns: Type Description ApiResponse ApiResponse object global_search_notes ( session , search_term ) Searches in note contents across all investigation Parameters: Name Type Description Default session ClientSession Client Session to use for request required search_term str Search term to search for notes required Returns: Type Description ApiResponse ApiResponse object","title":"Global search"},{"location":"python_client/references/global_search/#dfir_iris_client.global_search.global_search_ioc","text":"Searches an IOC across all investigation Parameters: Name Type Description Default session ClientSession Client Session to use for request required search_term str Search term to search for IOC required Returns: Type Description ApiResponse ApiResponse object","title":"global_search_ioc()"},{"location":"python_client/references/global_search/#dfir_iris_client.global_search.global_search_notes","text":"Searches in note contents across all investigation Parameters: Name Type Description Default session ClientSession Client Session to use for request required search_term str Search term to search for notes required Returns: Type Description ApiResponse ApiResponse object","title":"global_search_notes()"},{"location":"python_client/references/session/","text":"API_VERSION = '1.0.2' module-attribute client_session Defines a global session, accessible by all classes. client_session is of type ClientSession. log = logger . getLogger ( __name__ ) module-attribute API_VERSION The API version is not directly correlated with Iris version. Server has an endpoint /api/versions which should returns the API compatible versions it can handles. ClientSession Bases: object Represents a client that can interacts with Iris. It is basic wrapper handling authentication and the requests to the server. __init__ ( apikey , host = None , agent = 'iris-client' , ssl_verify = True , proxy = None , timeout = 120 ) Version verification expects to fall into the following schema Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version) Initialize the ClientSession. APIKey validity is verified as well as API compatibility between the client and the server. If the client does not find itself compatible, an exception is raised. Once successfully initialized, the session become available through global var client_session. Parameters: Name Type Description Default apikey A valid API key. It can be fetched from My profile > API Key required host Target IRIS server full URL eg https://iris.local:9443 None agent User agent to issue the requests with 'iris-client' ssl_verify Set or unset SSL verification True proxy Proxy parameters - For future use only None timeout Default timeout for requests 120 _check_api_compatibility () Checks that the server and client can work together. The methods expects the following : Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version) If API is not compatible, an exception is raised. Returns: Type Description bool bool _check_apikey_validity () Checks the validity of the provided API key (emptiness, string and authorized). If the key is invalid, a ValueError exception is raised. Returns: Type Description bool bool _pi_request ( uri , type = None , data = None ) Make a request (GET or POST) and handle the errors. The authentication header is added. Parameters: Name Type Description Default uri str URI to request required type str Type of the request [POST or GET] None data dict dict to send if request type is POST None Returns: Type Description ApiResponse ApiResponse object _pi_uri ( uri = None ) Wraps the provided uri around the URL. Parameters: Name Type Description Default uri str URI to request None Returns: Type Description Str - URL to request pi_get ( uri , cid = None ) Adds the CID information needed by the server when issuing GET requests and then issue the request itself. Parameters: Name Type Description Default uri str URI endpoint to request required cid int Target case ID None Returns: Type Description ApiResponse ApiResponse object pi_post ( uri , data ) Issues a POSt request with the provided data. Simple wrapper around _pi_request Parameters: Name Type Description Default uri str URI endpoint to request required data dict data to be posted. Expect a dict required Returns: Type Description ApiResponse ApiResponse object preload_base_objects () Preload the base objects most commonly used. This simply init the BaseObjects class, which in turns requests and build all the most common objects such as AnalysisStatus, EventCategory, EventType, etc. For future use only","title":"Session"},{"location":"python_client/references/session/#dfir_iris_client.session.API_VERSION","text":"client_session Defines a global session, accessible by all classes. client_session is of type ClientSession.","title":"API_VERSION"},{"location":"python_client/references/session/#dfir_iris_client.session.log","text":"API_VERSION The API version is not directly correlated with Iris version. Server has an endpoint /api/versions which should returns the API compatible versions it can handles.","title":"log"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession","text":"Bases: object Represents a client that can interacts with Iris. It is basic wrapper handling authentication and the requests to the server.","title":"ClientSession"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession.__init__","text":"Version verification expects to fall into the following schema Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version) Initialize the ClientSession. APIKey validity is verified as well as API compatibility between the client and the server. If the client does not find itself compatible, an exception is raised. Once successfully initialized, the session become available through global var client_session. Parameters: Name Type Description Default apikey A valid API key. It can be fetched from My profile > API Key required host Target IRIS server full URL eg https://iris.local:9443 None agent User agent to issue the requests with 'iris-client' ssl_verify Set or unset SSL verification True proxy Proxy parameters - For future use only None timeout Default timeout for requests 120","title":"__init__()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession._check_api_compatibility","text":"Checks that the server and client can work together. The methods expects the following : Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version) If API is not compatible, an exception is raised. Returns: Type Description bool bool","title":"_check_api_compatibility()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession._check_apikey_validity","text":"Checks the validity of the provided API key (emptiness, string and authorized). If the key is invalid, a ValueError exception is raised. Returns: Type Description bool bool","title":"_check_apikey_validity()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession._pi_request","text":"Make a request (GET or POST) and handle the errors. The authentication header is added. Parameters: Name Type Description Default uri str URI to request required type str Type of the request [POST or GET] None data dict dict to send if request type is POST None Returns: Type Description ApiResponse ApiResponse object","title":"_pi_request()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession._pi_uri","text":"Wraps the provided uri around the URL. Parameters: Name Type Description Default uri str URI to request None Returns: Type Description Str - URL to request","title":"_pi_uri()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession.pi_get","text":"Adds the CID information needed by the server when issuing GET requests and then issue the request itself. Parameters: Name Type Description Default uri str URI endpoint to request required cid int Target case ID None Returns: Type Description ApiResponse ApiResponse object","title":"pi_get()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession.pi_post","text":"Issues a POSt request with the provided data. Simple wrapper around _pi_request Parameters: Name Type Description Default uri str URI endpoint to request required data dict data to be posted. Expect a dict required Returns: Type Description ApiResponse ApiResponse object","title":"pi_post()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession.preload_base_objects","text":"Preload the base objects most commonly used. This simply init the BaseObjects class, which in turns requests and build all the most common objects such as AnalysisStatus, EventCategory, EventType, etc. For future use only","title":"preload_base_objects()"},{"location":"python_client/references/users/","text":"User Bases: object Handles the users type methods get_user ( user_id ) Return a user data Parameters: Name Type Description Default user_id int USer ID to verify required Returns: Type Description ApiResponse bool - Asset type ID matching provided asset type name list_users () Returns a list of the users with a restricted view so it can be called by unprivileged users. Returns: Type Description ApiResponse ApiResponse object lookup_username ( username ) Returns a user ID corresponding to the username, else None Parameters: Name Type Description Default username str User name to lookup required Returns: Type Description ApiResponse ApiResponse user_id_exists ( user_id ) Returns True if the user ID exists, else false Parameters: Name Type Description Default user_id int User ID to verify required Returns: Type Description bool bool - Asset type ID matching provided asset type name username_exists ( username ) Returns True if the username (login) exists, else false. This is equivalent to calling lookup_username() and getting the results. Parameters: Name Type Description Default username str User name (login) to lookup required Returns: Type Description bool True if exists else false","title":"Users"},{"location":"python_client/references/users/#dfir_iris_client.users.User","text":"Bases: object Handles the users type methods","title":"User"},{"location":"python_client/references/users/#dfir_iris_client.users.User.get_user","text":"Return a user data Parameters: Name Type Description Default user_id int USer ID to verify required Returns: Type Description ApiResponse bool - Asset type ID matching provided asset type name","title":"get_user()"},{"location":"python_client/references/users/#dfir_iris_client.users.User.list_users","text":"Returns a list of the users with a restricted view so it can be called by unprivileged users. Returns: Type Description ApiResponse ApiResponse object","title":"list_users()"},{"location":"python_client/references/users/#dfir_iris_client.users.User.lookup_username","text":"Returns a user ID corresponding to the username, else None Parameters: Name Type Description Default username str User name to lookup required Returns: Type Description ApiResponse ApiResponse","title":"lookup_username()"},{"location":"python_client/references/users/#dfir_iris_client.users.User.user_id_exists","text":"Returns True if the user ID exists, else false Parameters: Name Type Description Default user_id int User ID to verify required Returns: Type Description bool bool - Asset type ID matching provided asset type name","title":"user_id_exists()"},{"location":"python_client/references/users/#dfir_iris_client.users.User.username_exists","text":"Returns True if the username (login) exists, else false. This is equivalent to calling lookup_username() and getting the results. Parameters: Name Type Description Default username str User name (login) to lookup required Returns: Type Description bool True if exists else false","title":"username_exists()"}]}